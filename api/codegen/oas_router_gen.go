// Code generated by ogen, DO NOT EDIT.

package codegen

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "beats-sheet"

				if l := len("beats-sheet"); len(elem) >= l && elem[0:l] == "beats-sheet" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetBeatsSheetRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handleCreateBeatsSheetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,PUT")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "expand"

						if l := len("expand"); len(elem) >= l && elem[0:l] == "expand" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleExpandBeatRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'g': // Prefix: "generate"

						if l := len("generate"); len(elem) >= l && elem[0:l] == "generate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGenerateBeatsSheetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'r': // Prefix: "regenerate"

						if l := len("regenerate"); len(elem) >= l && elem[0:l] == "regenerate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleRegenerateBeatsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetBeatsSheetsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			case 'h': // Prefix: "healthcheck"

				if l := len("healthcheck"); len(elem) >= l && elem[0:l] == "healthcheck" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleHealthcheckRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'l': // Prefix: "logline"

				if l := len("logline"); len(elem) >= l && elem[0:l] == "logline" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetLoglineRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handleCreateLoglineRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,PUT")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/expand"

					if l := len("/expand"); len(elem) >= l && elem[0:l] == "/expand" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleExpandLoglineRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetLoglinesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/generate"

						if l := len("/generate"); len(elem) >= l && elem[0:l] == "/generate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGenerateLoglinesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			case 'p': // Prefix: "ping"

				if l := len("ping"); len(elem) >= l && elem[0:l] == "ping" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handlePingRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 's': // Prefix: "story-plan"

				if l := len("story-plan"); len(elem) >= l && elem[0:l] == "story-plan" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetStoryPlanRequest([0]string{}, elemIsEscaped, w, r)
					case "PATCH":
						s.handleUpdateStoryPlanRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handleCreateStoryPlanRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,PATCH,PUT")
					}

					return
				}
				switch elem[0] {
				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetStoryPlansRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "beats-sheet"

				if l := len("beats-sheet"); len(elem) >= l && elem[0:l] == "beats-sheet" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetBeatsSheetOperation
						r.summary = "Get a beats sheet."
						r.operationID = "getBeatsSheet"
						r.pathPattern = "/beats-sheet"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = CreateBeatsSheetOperation
						r.summary = "Create a new beats sheet."
						r.operationID = "createBeatsSheet"
						r.pathPattern = "/beats-sheet"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "expand"

						if l := len("expand"); len(elem) >= l && elem[0:l] == "expand" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = ExpandBeatOperation
								r.summary = "Expand a beat in a beats sheet."
								r.operationID = "expandBeat"
								r.pathPattern = "/beats-sheet/expand"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'g': // Prefix: "generate"

						if l := len("generate"); len(elem) >= l && elem[0:l] == "generate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = GenerateBeatsSheetOperation
								r.summary = "Generate a new beats sheet."
								r.operationID = "generateBeatsSheet"
								r.pathPattern = "/beats-sheet/generate"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'r': // Prefix: "regenerate"

						if l := len("regenerate"); len(elem) >= l && elem[0:l] == "regenerate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = RegenerateBeatsOperation
								r.summary = "Regenerate beats in a beats sheet."
								r.operationID = "regenerateBeats"
								r.pathPattern = "/beats-sheet/regenerate"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetBeatsSheetsOperation
							r.summary = "Get all beats sheets."
							r.operationID = "getBeatsSheets"
							r.pathPattern = "/beats-sheets"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'h': // Prefix: "healthcheck"

				if l := len("healthcheck"); len(elem) >= l && elem[0:l] == "healthcheck" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = HealthcheckOperation
						r.summary = "Check the health of the service."
						r.operationID = "healthcheck"
						r.pathPattern = "/healthcheck"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'l': // Prefix: "logline"

				if l := len("logline"); len(elem) >= l && elem[0:l] == "logline" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetLoglineOperation
						r.summary = "Get a logline."
						r.operationID = "getLogline"
						r.pathPattern = "/logline"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = CreateLoglineOperation
						r.summary = "Create a new logline."
						r.operationID = "createLogline"
						r.pathPattern = "/logline"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/expand"

					if l := len("/expand"); len(elem) >= l && elem[0:l] == "/expand" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = ExpandLoglineOperation
							r.summary = "Expand a logline idea."
							r.operationID = "expandLogline"
							r.pathPattern = "/logline/expand"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetLoglinesOperation
							r.summary = "Get all loglines."
							r.operationID = "getLoglines"
							r.pathPattern = "/loglines"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/generate"

						if l := len("/generate"); len(elem) >= l && elem[0:l] == "/generate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = GenerateLoglinesOperation
								r.summary = "Generate new loglines."
								r.operationID = "generateLoglines"
								r.pathPattern = "/loglines/generate"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'p': // Prefix: "ping"

				if l := len("ping"); len(elem) >= l && elem[0:l] == "ping" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = PingOperation
						r.summary = "Check the status of the service."
						r.operationID = "ping"
						r.pathPattern = "/ping"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 's': // Prefix: "story-plan"

				if l := len("story-plan"); len(elem) >= l && elem[0:l] == "story-plan" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetStoryPlanOperation
						r.summary = "Get a story plan."
						r.operationID = "getStoryPlan"
						r.pathPattern = "/story-plan"
						r.args = args
						r.count = 0
						return r, true
					case "PATCH":
						r.name = UpdateStoryPlanOperation
						r.summary = "Update a story plan."
						r.operationID = "updateStoryPlan"
						r.pathPattern = "/story-plan"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = CreateStoryPlanOperation
						r.summary = "Create a new story plan."
						r.operationID = "createStoryPlan"
						r.pathPattern = "/story-plan"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetStoryPlansOperation
							r.summary = "Get all story plans."
							r.operationID = "getStoryPlans"
							r.pathPattern = "/story-plans"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
