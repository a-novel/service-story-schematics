// Code generated by ogen, DO NOT EDIT.

package apimodels

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

func (s *UnexpectedErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BearerAuth struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *BearerAuth) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *BearerAuth) SetRoles(val []string) {
	s.Roles = val
}

// A beat is a single unit of a story, representing an action through a sequence of scenes.
// Ref: #/components/schemas/Beat
type Beat struct {
	// The key of the beat.
	Key string `json:"key"`
	// The title of the beat.
	Title string `json:"title"`
	// The content of the beat.
	Content string `json:"content"`
}

// GetKey returns the value of Key.
func (s *Beat) GetKey() string {
	return s.Key
}

// GetTitle returns the value of Title.
func (s *Beat) GetTitle() string {
	return s.Title
}

// GetContent returns the value of Content.
func (s *Beat) GetContent() string {
	return s.Content
}

// SetKey sets the value of Key.
func (s *Beat) SetKey(val string) {
	s.Key = val
}

// SetTitle sets the value of Title.
func (s *Beat) SetTitle(val string) {
	s.Title = val
}

// SetContent sets the value of Content.
func (s *Beat) SetContent(val string) {
	s.Content = val
}

func (*Beat) expandBeatRes() {}

type Beats []Beat

func (*Beats) regenerateBeatsRes() {}

// A beats sheet is a detailed outline of a story, breaking it down into its individual beats.
// Ref: #/components/schemas/BeatsSheet
type BeatsSheet struct {
	ID        BeatsSheetID `json:"id"`
	LoglineID LoglineID    `json:"loglineID"`
	Content   []Beat       `json:"content"`
	// The language of the beats sheet.
	Lang Lang `json:"lang"`
	// The date and time at which the beats sheet was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *BeatsSheet) GetID() BeatsSheetID {
	return s.ID
}

// GetLoglineID returns the value of LoglineID.
func (s *BeatsSheet) GetLoglineID() LoglineID {
	return s.LoglineID
}

// GetContent returns the value of Content.
func (s *BeatsSheet) GetContent() []Beat {
	return s.Content
}

// GetLang returns the value of Lang.
func (s *BeatsSheet) GetLang() Lang {
	return s.Lang
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BeatsSheet) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *BeatsSheet) SetID(val BeatsSheetID) {
	s.ID = val
}

// SetLoglineID sets the value of LoglineID.
func (s *BeatsSheet) SetLoglineID(val LoglineID) {
	s.LoglineID = val
}

// SetContent sets the value of Content.
func (s *BeatsSheet) SetContent(val []Beat) {
	s.Content = val
}

// SetLang sets the value of Lang.
func (s *BeatsSheet) SetLang(val Lang) {
	s.Lang = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BeatsSheet) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*BeatsSheet) createBeatsSheetRes() {}
func (*BeatsSheet) getBeatsSheetRes()    {}

type BeatsSheetID uuid.UUID

// A candidate beats sheet generated by the API.
// Ref: #/components/schemas/BeatsSheetIdea
type BeatsSheetIdea struct {
	Content []Beat `json:"content"`
	// The language of the beats sheet idea.
	Lang Lang `json:"lang"`
}

// GetContent returns the value of Content.
func (s *BeatsSheetIdea) GetContent() []Beat {
	return s.Content
}

// GetLang returns the value of Lang.
func (s *BeatsSheetIdea) GetLang() Lang {
	return s.Lang
}

// SetContent sets the value of Content.
func (s *BeatsSheetIdea) SetContent(val []Beat) {
	s.Content = val
}

// SetLang sets the value of Lang.
func (s *BeatsSheetIdea) SetLang(val Lang) {
	s.Lang = val
}

func (*BeatsSheetIdea) generateBeatsSheetRes() {}

// Ref: #/components/schemas/BeatsSheetPreview
type BeatsSheetPreview struct {
	ID BeatsSheetID `json:"id"`
	// The language of the beats sheet.
	Lang Lang `json:"lang"`
	// The date and time at which the beats sheet was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *BeatsSheetPreview) GetID() BeatsSheetID {
	return s.ID
}

// GetLang returns the value of Lang.
func (s *BeatsSheetPreview) GetLang() Lang {
	return s.Lang
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BeatsSheetPreview) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *BeatsSheetPreview) SetID(val BeatsSheetID) {
	s.ID = val
}

// SetLang sets the value of Lang.
func (s *BeatsSheetPreview) SetLang(val Lang) {
	s.Lang = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BeatsSheetPreview) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Ref: #/components/schemas/CreateBeatsSheetForm
type CreateBeatsSheetForm struct {
	LoglineID LoglineID `json:"loglineID"`
	// The beats of the story, in order.
	Content []Beat `json:"content"`
	// The language of the beats sheet.
	Lang Lang `json:"lang"`
}

// GetLoglineID returns the value of LoglineID.
func (s *CreateBeatsSheetForm) GetLoglineID() LoglineID {
	return s.LoglineID
}

// GetContent returns the value of Content.
func (s *CreateBeatsSheetForm) GetContent() []Beat {
	return s.Content
}

// GetLang returns the value of Lang.
func (s *CreateBeatsSheetForm) GetLang() Lang {
	return s.Lang
}

// SetLoglineID sets the value of LoglineID.
func (s *CreateBeatsSheetForm) SetLoglineID(val LoglineID) {
	s.LoglineID = val
}

// SetContent sets the value of Content.
func (s *CreateBeatsSheetForm) SetContent(val []Beat) {
	s.Content = val
}

// SetLang sets the value of Lang.
func (s *CreateBeatsSheetForm) SetLang(val Lang) {
	s.Lang = val
}

// Ref: #/components/schemas/CreateLoglineForm
type CreateLoglineForm struct {
	Slug Slug `json:"slug"`
	// The name of the logline.
	Name string `json:"name"`
	// The content of the logline.
	Content string `json:"content"`
	// The language of the logline.
	Lang Lang `json:"lang"`
}

// GetSlug returns the value of Slug.
func (s *CreateLoglineForm) GetSlug() Slug {
	return s.Slug
}

// GetName returns the value of Name.
func (s *CreateLoglineForm) GetName() string {
	return s.Name
}

// GetContent returns the value of Content.
func (s *CreateLoglineForm) GetContent() string {
	return s.Content
}

// GetLang returns the value of Lang.
func (s *CreateLoglineForm) GetLang() Lang {
	return s.Lang
}

// SetSlug sets the value of Slug.
func (s *CreateLoglineForm) SetSlug(val Slug) {
	s.Slug = val
}

// SetName sets the value of Name.
func (s *CreateLoglineForm) SetName(val string) {
	s.Name = val
}

// SetContent sets the value of Content.
func (s *CreateLoglineForm) SetContent(val string) {
	s.Content = val
}

// SetLang sets the value of Lang.
func (s *CreateLoglineForm) SetLang(val Lang) {
	s.Lang = val
}

// Ref: #/components/schemas/Dependency
type Dependency struct {
	// The name of the dependency.
	Name            string           `json:"name"`
	Status          DependencyStatus `json:"status"`
	AdditionalProps DependencyAdditional
}

// GetName returns the value of Name.
func (s *Dependency) GetName() string {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *Dependency) GetStatus() DependencyStatus {
	return s.Status
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *Dependency) GetAdditionalProps() DependencyAdditional {
	return s.AdditionalProps
}

// SetName sets the value of Name.
func (s *Dependency) SetName(val string) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *Dependency) SetStatus(val DependencyStatus) {
	s.Status = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *Dependency) SetAdditionalProps(val DependencyAdditional) {
	s.AdditionalProps = val
}

type DependencyAdditional map[string]jx.Raw

func (s *DependencyAdditional) init() DependencyAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The status of a dependency.
// Ref: #/components/schemas/DependencyStatus
type DependencyStatus string

const (
	DependencyStatusUp      DependencyStatus = "up"
	DependencyStatusDown    DependencyStatus = "down"
	DependencyStatusUnknown DependencyStatus = "unknown"
)

// AllValues returns all DependencyStatus values.
func (DependencyStatus) AllValues() []DependencyStatus {
	return []DependencyStatus{
		DependencyStatusUp,
		DependencyStatusDown,
		DependencyStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DependencyStatus) MarshalText() ([]byte, error) {
	switch s {
	case DependencyStatusUp:
		return []byte(s), nil
	case DependencyStatusDown:
		return []byte(s), nil
	case DependencyStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DependencyStatus) UnmarshalText(data []byte) error {
	switch DependencyStatus(data) {
	case DependencyStatusUp:
		*s = DependencyStatusUp
		return nil
	case DependencyStatusDown:
		*s = DependencyStatusDown
		return nil
	case DependencyStatusUnknown:
		*s = DependencyStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExpandBeatForm
type ExpandBeatForm struct {
	BeatsSheetID BeatsSheetID `json:"beatsSheetID"`
	// The key of the beat to expand.
	TargetKey string `json:"targetKey"`
}

// GetBeatsSheetID returns the value of BeatsSheetID.
func (s *ExpandBeatForm) GetBeatsSheetID() BeatsSheetID {
	return s.BeatsSheetID
}

// GetTargetKey returns the value of TargetKey.
func (s *ExpandBeatForm) GetTargetKey() string {
	return s.TargetKey
}

// SetBeatsSheetID sets the value of BeatsSheetID.
func (s *ExpandBeatForm) SetBeatsSheetID(val BeatsSheetID) {
	s.BeatsSheetID = val
}

// SetTargetKey sets the value of TargetKey.
func (s *ExpandBeatForm) SetTargetKey(val string) {
	s.TargetKey = val
}

// Ref: #/components/schemas/ForbiddenError
type ForbiddenError struct {
	// The error message.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *ForbiddenError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *ForbiddenError) SetError(val string) {
	s.Error = val
}

func (*ForbiddenError) createBeatsSheetRes()   {}
func (*ForbiddenError) createLoglineRes()      {}
func (*ForbiddenError) expandBeatRes()         {}
func (*ForbiddenError) expandLoglineRes()      {}
func (*ForbiddenError) generateBeatsSheetRes() {}
func (*ForbiddenError) generateLoglinesRes()   {}
func (*ForbiddenError) getBeatsSheetRes()      {}
func (*ForbiddenError) getBeatsSheetsRes()     {}
func (*ForbiddenError) getLoglineRes()         {}
func (*ForbiddenError) getLoglinesRes()        {}
func (*ForbiddenError) regenerateBeatsRes()    {}

// Ref: #/components/schemas/GenerateBeatsSheetForm
type GenerateBeatsSheetForm struct {
	LoglineID LoglineID `json:"loglineID"`
	// The language of the beats sheet to generate.
	Lang Lang `json:"lang"`
}

// GetLoglineID returns the value of LoglineID.
func (s *GenerateBeatsSheetForm) GetLoglineID() LoglineID {
	return s.LoglineID
}

// GetLang returns the value of Lang.
func (s *GenerateBeatsSheetForm) GetLang() Lang {
	return s.Lang
}

// SetLoglineID sets the value of LoglineID.
func (s *GenerateBeatsSheetForm) SetLoglineID(val LoglineID) {
	s.LoglineID = val
}

// SetLang sets the value of Lang.
func (s *GenerateBeatsSheetForm) SetLang(val Lang) {
	s.Lang = val
}

// Ref: #/components/schemas/GenerateLoglinesForm
type GenerateLoglinesForm struct {
	// The number of loglines to generate.
	Count int `json:"count"`
	// The theme of the loglines to generate.
	Theme string `json:"theme"`
	// The language of the loglines to generate.
	Lang Lang `json:"lang"`
}

// GetCount returns the value of Count.
func (s *GenerateLoglinesForm) GetCount() int {
	return s.Count
}

// GetTheme returns the value of Theme.
func (s *GenerateLoglinesForm) GetTheme() string {
	return s.Theme
}

// GetLang returns the value of Lang.
func (s *GenerateLoglinesForm) GetLang() Lang {
	return s.Lang
}

// SetCount sets the value of Count.
func (s *GenerateLoglinesForm) SetCount(val int) {
	s.Count = val
}

// SetTheme sets the value of Theme.
func (s *GenerateLoglinesForm) SetTheme(val string) {
	s.Theme = val
}

// SetLang sets the value of Lang.
func (s *GenerateLoglinesForm) SetLang(val Lang) {
	s.Lang = val
}

type GenerateLoglinesOKApplicationJSON []LoglineIdea

func (*GenerateLoglinesOKApplicationJSON) generateLoglinesRes() {}

type GetBeatsSheetsOKApplicationJSON []BeatsSheetPreview

func (*GetBeatsSheetsOKApplicationJSON) getBeatsSheetsRes() {}

type GetLoglinesOKApplicationJSON []LoglinePreview

func (*GetLoglinesOKApplicationJSON) getLoglinesRes() {}

// Ref: #/components/schemas/Health
type Health struct {
	Postgres Dependency `json:"postgres"`
	JsonKeys Dependency `json:"jsonKeys"`
	Openai   Dependency `json:"openai"`
}

// GetPostgres returns the value of Postgres.
func (s *Health) GetPostgres() Dependency {
	return s.Postgres
}

// GetJsonKeys returns the value of JsonKeys.
func (s *Health) GetJsonKeys() Dependency {
	return s.JsonKeys
}

// GetOpenai returns the value of Openai.
func (s *Health) GetOpenai() Dependency {
	return s.Openai
}

// SetPostgres sets the value of Postgres.
func (s *Health) SetPostgres(val Dependency) {
	s.Postgres = val
}

// SetJsonKeys sets the value of JsonKeys.
func (s *Health) SetJsonKeys(val Dependency) {
	s.JsonKeys = val
}

// SetOpenai sets the value of Openai.
func (s *Health) SetOpenai(val Dependency) {
	s.Openai = val
}

func (*Health) healthcheckRes() {}

// HealthcheckIMATeapot is response for Healthcheck operation.
type HealthcheckIMATeapot struct{}

func (*HealthcheckIMATeapot) healthcheckRes() {}

// The language of the content.
// Ref: #/components/schemas/Lang
type Lang string

const (
	LangEn Lang = "en"
	LangFr Lang = "fr"
)

// AllValues returns all Lang values.
func (Lang) AllValues() []Lang {
	return []Lang{
		LangEn,
		LangFr,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Lang) MarshalText() ([]byte, error) {
	switch s {
	case LangEn:
		return []byte(s), nil
	case LangFr:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Lang) UnmarshalText(data []byte) error {
	switch Lang(data) {
	case LangEn:
		*s = LangEn
		return nil
	case LangFr:
		*s = LangFr
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A logline is a brief summary of a story, used to quickly convey its essence.
// Ref: #/components/schemas/Logline
type Logline struct {
	ID     LoglineID `json:"id"`
	UserID UserID    `json:"userID"`
	Slug   Slug      `json:"slug"`
	// The name of the logline.
	Name string `json:"name"`
	// The content of the logline.
	Content string `json:"content"`
	// The language of the logline.
	Lang Lang `json:"lang"`
	// The date and time at which the logline was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *Logline) GetID() LoglineID {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *Logline) GetUserID() UserID {
	return s.UserID
}

// GetSlug returns the value of Slug.
func (s *Logline) GetSlug() Slug {
	return s.Slug
}

// GetName returns the value of Name.
func (s *Logline) GetName() string {
	return s.Name
}

// GetContent returns the value of Content.
func (s *Logline) GetContent() string {
	return s.Content
}

// GetLang returns the value of Lang.
func (s *Logline) GetLang() Lang {
	return s.Lang
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Logline) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Logline) SetID(val LoglineID) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *Logline) SetUserID(val UserID) {
	s.UserID = val
}

// SetSlug sets the value of Slug.
func (s *Logline) SetSlug(val Slug) {
	s.Slug = val
}

// SetName sets the value of Name.
func (s *Logline) SetName(val string) {
	s.Name = val
}

// SetContent sets the value of Content.
func (s *Logline) SetContent(val string) {
	s.Content = val
}

// SetLang sets the value of Lang.
func (s *Logline) SetLang(val Lang) {
	s.Lang = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Logline) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*Logline) createLoglineRes() {}
func (*Logline) getLoglineRes()    {}

type LoglineID uuid.UUID

// Ref: #/components/schemas/LoglineIdea
type LoglineIdea struct {
	// The title of the logline idea.
	Name string `json:"name"`
	// The content of the logline idea.
	Content string `json:"content"`
	// The language of the logline idea.
	Lang Lang `json:"lang"`
}

// GetName returns the value of Name.
func (s *LoglineIdea) GetName() string {
	return s.Name
}

// GetContent returns the value of Content.
func (s *LoglineIdea) GetContent() string {
	return s.Content
}

// GetLang returns the value of Lang.
func (s *LoglineIdea) GetLang() Lang {
	return s.Lang
}

// SetName sets the value of Name.
func (s *LoglineIdea) SetName(val string) {
	s.Name = val
}

// SetContent sets the value of Content.
func (s *LoglineIdea) SetContent(val string) {
	s.Content = val
}

// SetLang sets the value of Lang.
func (s *LoglineIdea) SetLang(val Lang) {
	s.Lang = val
}

func (*LoglineIdea) expandLoglineRes() {}

// Ref: #/components/schemas/LoglinePreview
type LoglinePreview struct {
	Slug Slug `json:"slug"`
	// The name of the logline.
	Name string `json:"name"`
	// The content of the logline.
	Content string `json:"content"`
	// The language of the logline.
	Lang Lang `json:"lang"`
	// The date and time at which the logline was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetSlug returns the value of Slug.
func (s *LoglinePreview) GetSlug() Slug {
	return s.Slug
}

// GetName returns the value of Name.
func (s *LoglinePreview) GetName() string {
	return s.Name
}

// GetContent returns the value of Content.
func (s *LoglinePreview) GetContent() string {
	return s.Content
}

// GetLang returns the value of Lang.
func (s *LoglinePreview) GetLang() Lang {
	return s.Lang
}

// GetCreatedAt returns the value of CreatedAt.
func (s *LoglinePreview) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetSlug sets the value of Slug.
func (s *LoglinePreview) SetSlug(val Slug) {
	s.Slug = val
}

// SetName sets the value of Name.
func (s *LoglinePreview) SetName(val string) {
	s.Name = val
}

// SetContent sets the value of Content.
func (s *LoglinePreview) SetContent(val string) {
	s.Content = val
}

// SetLang sets the value of Lang.
func (s *LoglinePreview) SetLang(val Lang) {
	s.Lang = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *LoglinePreview) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Ref: #/components/schemas/NotFoundError
type NotFoundError struct {
	// The error message.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *NotFoundError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *NotFoundError) SetError(val string) {
	s.Error = val
}

func (*NotFoundError) createBeatsSheetRes()   {}
func (*NotFoundError) expandBeatRes()         {}
func (*NotFoundError) generateBeatsSheetRes() {}
func (*NotFoundError) getBeatsSheetRes()      {}
func (*NotFoundError) getLoglineRes()         {}
func (*NotFoundError) regenerateBeatsRes()    {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoglineID returns new OptLoglineID with value set to v.
func NewOptLoglineID(v LoglineID) OptLoglineID {
	return OptLoglineID{
		Value: v,
		Set:   true,
	}
}

// OptLoglineID is optional LoglineID.
type OptLoglineID struct {
	Value LoglineID
	Set   bool
}

// IsSet returns true if OptLoglineID was set.
func (o OptLoglineID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoglineID) Reset() {
	var v LoglineID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoglineID) SetTo(v LoglineID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoglineID) Get() (v LoglineID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoglineID) Or(d LoglineID) LoglineID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSlug returns new OptSlug with value set to v.
func NewOptSlug(v Slug) OptSlug {
	return OptSlug{
		Value: v,
		Set:   true,
	}
}

// OptSlug is optional Slug.
type OptSlug struct {
	Value Slug
	Set   bool
}

// IsSet returns true if OptSlug was set.
func (o OptSlug) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSlug) Reset() {
	var v Slug
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSlug) SetTo(v Slug) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSlug) Get() (v Slug, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSlug) Or(d Slug) Slug {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PingIMATeapot is response for Ping operation.
type PingIMATeapot struct{}

func (*PingIMATeapot) pingRes() {}

type PingOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PingOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*PingOK) pingRes() {}

// Ref: #/components/schemas/RegenerateBeatsForm
type RegenerateBeatsForm struct {
	BeatsSheetID BeatsSheetID `json:"beatsSheetID"`
	// The keys of the beats to regenerate.
	RegenerateKeys []string `json:"regenerateKeys"`
}

// GetBeatsSheetID returns the value of BeatsSheetID.
func (s *RegenerateBeatsForm) GetBeatsSheetID() BeatsSheetID {
	return s.BeatsSheetID
}

// GetRegenerateKeys returns the value of RegenerateKeys.
func (s *RegenerateBeatsForm) GetRegenerateKeys() []string {
	return s.RegenerateKeys
}

// SetBeatsSheetID sets the value of BeatsSheetID.
func (s *RegenerateBeatsForm) SetBeatsSheetID(val BeatsSheetID) {
	s.BeatsSheetID = val
}

// SetRegenerateKeys sets the value of RegenerateKeys.
func (s *RegenerateBeatsForm) SetRegenerateKeys(val []string) {
	s.RegenerateKeys = val
}

type Slug string

// Ref: #/components/schemas/UnauthorizedError
type UnauthorizedError struct {
	// The error message.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *UnauthorizedError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnauthorizedError) SetError(val string) {
	s.Error = val
}

func (*UnauthorizedError) createBeatsSheetRes()   {}
func (*UnauthorizedError) createLoglineRes()      {}
func (*UnauthorizedError) expandBeatRes()         {}
func (*UnauthorizedError) expandLoglineRes()      {}
func (*UnauthorizedError) generateBeatsSheetRes() {}
func (*UnauthorizedError) generateLoglinesRes()   {}
func (*UnauthorizedError) getBeatsSheetRes()      {}
func (*UnauthorizedError) getBeatsSheetsRes()     {}
func (*UnauthorizedError) getLoglineRes()         {}
func (*UnauthorizedError) getLoglinesRes()        {}
func (*UnauthorizedError) regenerateBeatsRes()    {}

// Ref: #/components/schemas/UnexpectedError
type UnexpectedError struct {
	// The error message.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *UnexpectedError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnexpectedError) SetError(val string) {
	s.Error = val
}

// UnexpectedErrorStatusCode wraps UnexpectedError with StatusCode.
type UnexpectedErrorStatusCode struct {
	StatusCode int
	Response   UnexpectedError
}

// GetStatusCode returns the value of StatusCode.
func (s *UnexpectedErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *UnexpectedErrorStatusCode) GetResponse() UnexpectedError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *UnexpectedErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *UnexpectedErrorStatusCode) SetResponse(val UnexpectedError) {
	s.Response = val
}

// Ref: #/components/schemas/UnprocessableEntityError
type UnprocessableEntityError struct {
	// The error message.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *UnprocessableEntityError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnprocessableEntityError) SetError(val string) {
	s.Error = val
}

func (*UnprocessableEntityError) createBeatsSheetRes() {}
func (*UnprocessableEntityError) expandBeatRes()       {}

type UserID uuid.UUID
