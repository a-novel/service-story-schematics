// Code generated by ogen, DO NOT EDIT.

package apimodels

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// CreateBeatsSheet implements createBeatsSheet operation.
//
// Create a new beats sheet for a logline, following a story plan.
//
// PUT /beats-sheet
func (UnimplementedHandler) CreateBeatsSheet(ctx context.Context, req *CreateBeatsSheetForm) (r CreateBeatsSheetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateLogline implements createLogline operation.
//
// Create a new logline for a user.
//
// PUT /logline
func (UnimplementedHandler) CreateLogline(ctx context.Context, req *CreateLoglineForm) (r CreateLoglineRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ExpandBeat implements expandBeat operation.
//
// Add more details to a specific beat in a beats sheet.
//
// POST /beats-sheet/expand
func (UnimplementedHandler) ExpandBeat(ctx context.Context, req *ExpandBeatForm) (r ExpandBeatRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ExpandLogline implements expandLogline operation.
//
// Add more details to a logline idea.
//
// POST /logline/expand
func (UnimplementedHandler) ExpandLogline(ctx context.Context, req *LoglineIdea) (r ExpandLoglineRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GenerateBeatsSheet implements generateBeatsSheet operation.
//
// Generate a new beats sheet for a logline, following a story plan.
//
// POST /beats-sheet/generate
func (UnimplementedHandler) GenerateBeatsSheet(ctx context.Context, req *GenerateBeatsSheetForm) (r GenerateBeatsSheetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GenerateLoglines implements generateLoglines operation.
//
// Generate new loglines for a user.
//
// POST /loglines/generate
func (UnimplementedHandler) GenerateLoglines(ctx context.Context, req *GenerateLoglinesForm) (r GenerateLoglinesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBeatsSheet implements getBeatsSheet operation.
//
// Get a beats sheet.
//
// GET /beats-sheet
func (UnimplementedHandler) GetBeatsSheet(ctx context.Context, params GetBeatsSheetParams) (r GetBeatsSheetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBeatsSheets implements getBeatsSheets operation.
//
// Get all beats sheets for the current user.
//
// GET /beats-sheets
func (UnimplementedHandler) GetBeatsSheets(ctx context.Context, params GetBeatsSheetsParams) (r GetBeatsSheetsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLogline implements getLogline operation.
//
// Get a logline.
//
// GET /logline
func (UnimplementedHandler) GetLogline(ctx context.Context, params GetLoglineParams) (r GetLoglineRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLoglines implements getLoglines operation.
//
// Get all loglines for the current user.
//
// GET /loglines
func (UnimplementedHandler) GetLoglines(ctx context.Context, params GetLoglinesParams) (r GetLoglinesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Healthcheck implements healthcheck operation.
//
// Returns a detailed report of the health of the service, including every dependency.
//
// GET /healthcheck
func (UnimplementedHandler) Healthcheck(ctx context.Context) (r HealthcheckRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Ping implements ping operation.
//
// Check the status of the service. If the service is running, a successful response is returned.
//
// GET /ping
func (UnimplementedHandler) Ping(ctx context.Context) (r PingRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RegenerateBeats implements regenerateBeats operation.
//
// Regenerate the content of specific beats in a beats sheet.
//
// POST /beats-sheet/regenerate
func (UnimplementedHandler) RegenerateBeats(ctx context.Context, req *RegenerateBeatsForm) (r RegenerateBeatsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewError creates *UnexpectedErrorStatusCode from error returned by handler.
//
// Used for common default response.
func (UnimplementedHandler) NewError(ctx context.Context, err error) (r *UnexpectedErrorStatusCode) {
	r = new(UnexpectedErrorStatusCode)
	return r
}
