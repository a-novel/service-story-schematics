// Code generated by ogen, DO NOT EDIT.

package apimodels

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateBeatsSheet implements createBeatsSheet operation.
	//
	// Create a new beats sheet for a logline, following a story plan.
	//
	// PUT /beats-sheet
	CreateBeatsSheet(ctx context.Context, req *CreateBeatsSheetForm) (CreateBeatsSheetRes, error)
	// CreateLogline implements createLogline operation.
	//
	// Create a new logline for a user.
	//
	// PUT /logline
	CreateLogline(ctx context.Context, req *CreateLoglineForm) (CreateLoglineRes, error)
	// CreateStoryPlan implements createStoryPlan operation.
	//
	// Create a new story plan.
	//
	// PUT /story-plan
	CreateStoryPlan(ctx context.Context, req *CreateStoryPlanForm) (CreateStoryPlanRes, error)
	// ExpandBeat implements expandBeat operation.
	//
	// Add more details to a specific beat in a beats sheet.
	//
	// POST /beats-sheet/expand
	ExpandBeat(ctx context.Context, req *ExpandBeatForm) (ExpandBeatRes, error)
	// ExpandLogline implements expandLogline operation.
	//
	// Add more details to a logline idea.
	//
	// POST /logline/expand
	ExpandLogline(ctx context.Context, req *LoglineIdea) (ExpandLoglineRes, error)
	// GenerateBeatsSheet implements generateBeatsSheet operation.
	//
	// Generate a new beats sheet for a logline, following a story plan.
	//
	// POST /beats-sheet/generate
	GenerateBeatsSheet(ctx context.Context, req *GenerateBeatsSheetForm) (GenerateBeatsSheetRes, error)
	// GenerateLoglines implements generateLoglines operation.
	//
	// Generate new loglines for a user.
	//
	// POST /loglines/generate
	GenerateLoglines(ctx context.Context, req *GenerateLoglinesForm) (GenerateLoglinesRes, error)
	// GetBeatsSheet implements getBeatsSheet operation.
	//
	// Get a beats sheet.
	//
	// GET /beats-sheet
	GetBeatsSheet(ctx context.Context, params GetBeatsSheetParams) (GetBeatsSheetRes, error)
	// GetBeatsSheets implements getBeatsSheets operation.
	//
	// Get all beats sheets for the current user.
	//
	// GET /beats-sheets
	GetBeatsSheets(ctx context.Context, params GetBeatsSheetsParams) (GetBeatsSheetsRes, error)
	// GetLogline implements getLogline operation.
	//
	// Get a logline.
	//
	// GET /logline
	GetLogline(ctx context.Context, params GetLoglineParams) (GetLoglineRes, error)
	// GetLoglines implements getLoglines operation.
	//
	// Get all loglines for the current user.
	//
	// GET /loglines
	GetLoglines(ctx context.Context, params GetLoglinesParams) (GetLoglinesRes, error)
	// GetStoryPlan implements getStoryPlan operation.
	//
	// Get a story plan.
	//
	// GET /story-plan
	GetStoryPlan(ctx context.Context, params GetStoryPlanParams) (GetStoryPlanRes, error)
	// GetStoryPlans implements getStoryPlans operation.
	//
	// Get all story plans.
	//
	// GET /story-plans
	GetStoryPlans(ctx context.Context, params GetStoryPlansParams) (GetStoryPlansRes, error)
	// Healthcheck implements healthcheck operation.
	//
	// Returns a detailed report of the health of the service, including every dependency.
	//
	// GET /healthcheck
	Healthcheck(ctx context.Context) (HealthcheckRes, error)
	// Ping implements ping operation.
	//
	// Check the status of the service. If the service is running, a successful response is returned.
	//
	// GET /ping
	Ping(ctx context.Context) (PingRes, error)
	// RegenerateBeats implements regenerateBeats operation.
	//
	// Regenerate the content of specific beats in a beats sheet.
	//
	// POST /beats-sheet/regenerate
	RegenerateBeats(ctx context.Context, req *RegenerateBeatsForm) (RegenerateBeatsRes, error)
	// UpdateStoryPlan implements updateStoryPlan operation.
	//
	// Update a story plan.
	//
	// PATCH /story-plan
	UpdateStoryPlan(ctx context.Context, req *UpdateStoryPlanForm) (UpdateStoryPlanRes, error)
	// NewError creates *UnexpectedErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *UnexpectedErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
