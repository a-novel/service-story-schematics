// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package servicesmocks

import (
	context0 "context"

	"github.com/a-novel-kit/context"
	"github.com/a-novel/service-story-schematics/internal/dao"
	"github.com/a-novel/service-story-schematics/internal/daoai"
	"github.com/a-novel/service-story-schematics/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCreateBeatsSheetSource creates a new instance of MockCreateBeatsSheetSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateBeatsSheetSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateBeatsSheetSource {
	mock := &MockCreateBeatsSheetSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCreateBeatsSheetSource is an autogenerated mock type for the CreateBeatsSheetSource type
type MockCreateBeatsSheetSource struct {
	mock.Mock
}

type MockCreateBeatsSheetSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateBeatsSheetSource) EXPECT() *MockCreateBeatsSheetSource_Expecter {
	return &MockCreateBeatsSheetSource_Expecter{mock: &_m.Mock}
}

// InsertBeatsSheet provides a mock function for the type MockCreateBeatsSheetSource
func (_mock *MockCreateBeatsSheetSource) InsertBeatsSheet(ctx context.Context, data dao.InsertBeatsSheetData) (*dao.BeatsSheetEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertBeatsSheet")
	}

	var r0 *dao.BeatsSheetEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertBeatsSheetData) (*dao.BeatsSheetEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertBeatsSheetData) *dao.BeatsSheetEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.BeatsSheetEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.InsertBeatsSheetData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreateBeatsSheetSource_InsertBeatsSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertBeatsSheet'
type MockCreateBeatsSheetSource_InsertBeatsSheet_Call struct {
	*mock.Call
}

// InsertBeatsSheet is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockCreateBeatsSheetSource_Expecter) InsertBeatsSheet(ctx interface{}, data interface{}) *MockCreateBeatsSheetSource_InsertBeatsSheet_Call {
	return &MockCreateBeatsSheetSource_InsertBeatsSheet_Call{Call: _e.mock.On("InsertBeatsSheet", ctx, data)}
}

func (_c *MockCreateBeatsSheetSource_InsertBeatsSheet_Call) Run(run func(ctx context.Context, data dao.InsertBeatsSheetData)) *MockCreateBeatsSheetSource_InsertBeatsSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.InsertBeatsSheetData))
	})
	return _c
}

func (_c *MockCreateBeatsSheetSource_InsertBeatsSheet_Call) Return(beatsSheetEntity *dao.BeatsSheetEntity, err error) *MockCreateBeatsSheetSource_InsertBeatsSheet_Call {
	_c.Call.Return(beatsSheetEntity, err)
	return _c
}

func (_c *MockCreateBeatsSheetSource_InsertBeatsSheet_Call) RunAndReturn(run func(ctx context.Context, data dao.InsertBeatsSheetData) (*dao.BeatsSheetEntity, error)) *MockCreateBeatsSheetSource_InsertBeatsSheet_Call {
	_c.Call.Return(run)
	return _c
}

// SelectLogline provides a mock function for the type MockCreateBeatsSheetSource
func (_mock *MockCreateBeatsSheetSource) SelectLogline(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectLogline")
	}

	var r0 *dao.LoglineEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) (*dao.LoglineEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) *dao.LoglineEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.LoglineEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectLoglineData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreateBeatsSheetSource_SelectLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLogline'
type MockCreateBeatsSheetSource_SelectLogline_Call struct {
	*mock.Call
}

// SelectLogline is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockCreateBeatsSheetSource_Expecter) SelectLogline(ctx interface{}, data interface{}) *MockCreateBeatsSheetSource_SelectLogline_Call {
	return &MockCreateBeatsSheetSource_SelectLogline_Call{Call: _e.mock.On("SelectLogline", ctx, data)}
}

func (_c *MockCreateBeatsSheetSource_SelectLogline_Call) Run(run func(ctx context.Context, data dao.SelectLoglineData)) *MockCreateBeatsSheetSource_SelectLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectLoglineData))
	})
	return _c
}

func (_c *MockCreateBeatsSheetSource_SelectLogline_Call) Return(loglineEntity *dao.LoglineEntity, err error) *MockCreateBeatsSheetSource_SelectLogline_Call {
	_c.Call.Return(loglineEntity, err)
	return _c
}

func (_c *MockCreateBeatsSheetSource_SelectLogline_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error)) *MockCreateBeatsSheetSource_SelectLogline_Call {
	_c.Call.Return(run)
	return _c
}

// SelectStoryPlan provides a mock function for the type MockCreateBeatsSheetSource
func (_mock *MockCreateBeatsSheetSource) SelectStoryPlan(ctx context.Context, data uuid.UUID) (*dao.StoryPlanEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectStoryPlan")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.StoryPlanEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.StoryPlanEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreateBeatsSheetSource_SelectStoryPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectStoryPlan'
type MockCreateBeatsSheetSource_SelectStoryPlan_Call struct {
	*mock.Call
}

// SelectStoryPlan is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockCreateBeatsSheetSource_Expecter) SelectStoryPlan(ctx interface{}, data interface{}) *MockCreateBeatsSheetSource_SelectStoryPlan_Call {
	return &MockCreateBeatsSheetSource_SelectStoryPlan_Call{Call: _e.mock.On("SelectStoryPlan", ctx, data)}
}

func (_c *MockCreateBeatsSheetSource_SelectStoryPlan_Call) Run(run func(ctx context.Context, data uuid.UUID)) *MockCreateBeatsSheetSource_SelectStoryPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockCreateBeatsSheetSource_SelectStoryPlan_Call) Return(storyPlanEntity *dao.StoryPlanEntity, err error) *MockCreateBeatsSheetSource_SelectStoryPlan_Call {
	_c.Call.Return(storyPlanEntity, err)
	return _c
}

func (_c *MockCreateBeatsSheetSource_SelectStoryPlan_Call) RunAndReturn(run func(ctx context.Context, data uuid.UUID) (*dao.StoryPlanEntity, error)) *MockCreateBeatsSheetSource_SelectStoryPlan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateLoglineSource creates a new instance of MockCreateLoglineSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateLoglineSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateLoglineSource {
	mock := &MockCreateLoglineSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCreateLoglineSource is an autogenerated mock type for the CreateLoglineSource type
type MockCreateLoglineSource struct {
	mock.Mock
}

type MockCreateLoglineSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateLoglineSource) EXPECT() *MockCreateLoglineSource_Expecter {
	return &MockCreateLoglineSource_Expecter{mock: &_m.Mock}
}

// InsertLogline provides a mock function for the type MockCreateLoglineSource
func (_mock *MockCreateLoglineSource) InsertLogline(ctx context.Context, data dao.InsertLoglineData) (*dao.LoglineEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertLogline")
	}

	var r0 *dao.LoglineEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertLoglineData) (*dao.LoglineEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertLoglineData) *dao.LoglineEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.LoglineEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.InsertLoglineData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreateLoglineSource_InsertLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertLogline'
type MockCreateLoglineSource_InsertLogline_Call struct {
	*mock.Call
}

// InsertLogline is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockCreateLoglineSource_Expecter) InsertLogline(ctx interface{}, data interface{}) *MockCreateLoglineSource_InsertLogline_Call {
	return &MockCreateLoglineSource_InsertLogline_Call{Call: _e.mock.On("InsertLogline", ctx, data)}
}

func (_c *MockCreateLoglineSource_InsertLogline_Call) Run(run func(ctx context.Context, data dao.InsertLoglineData)) *MockCreateLoglineSource_InsertLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.InsertLoglineData))
	})
	return _c
}

func (_c *MockCreateLoglineSource_InsertLogline_Call) Return(loglineEntity *dao.LoglineEntity, err error) *MockCreateLoglineSource_InsertLogline_Call {
	_c.Call.Return(loglineEntity, err)
	return _c
}

func (_c *MockCreateLoglineSource_InsertLogline_Call) RunAndReturn(run func(ctx context.Context, data dao.InsertLoglineData) (*dao.LoglineEntity, error)) *MockCreateLoglineSource_InsertLogline_Call {
	_c.Call.Return(run)
	return _c
}

// SelectSlugIteration provides a mock function for the type MockCreateLoglineSource
func (_mock *MockCreateLoglineSource) SelectSlugIteration(ctx context.Context, data dao.SelectSlugIterationData) (models.Slug, int, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectSlugIteration")
	}

	var r0 models.Slug
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectSlugIterationData) (models.Slug, int, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectSlugIterationData) models.Slug); ok {
		r0 = returnFunc(ctx, data)
	} else {
		r0 = ret.Get(0).(models.Slug)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectSlugIterationData) int); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, dao.SelectSlugIterationData) error); ok {
		r2 = returnFunc(ctx, data)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCreateLoglineSource_SelectSlugIteration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectSlugIteration'
type MockCreateLoglineSource_SelectSlugIteration_Call struct {
	*mock.Call
}

// SelectSlugIteration is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockCreateLoglineSource_Expecter) SelectSlugIteration(ctx interface{}, data interface{}) *MockCreateLoglineSource_SelectSlugIteration_Call {
	return &MockCreateLoglineSource_SelectSlugIteration_Call{Call: _e.mock.On("SelectSlugIteration", ctx, data)}
}

func (_c *MockCreateLoglineSource_SelectSlugIteration_Call) Run(run func(ctx context.Context, data dao.SelectSlugIterationData)) *MockCreateLoglineSource_SelectSlugIteration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectSlugIterationData))
	})
	return _c
}

func (_c *MockCreateLoglineSource_SelectSlugIteration_Call) Return(slug models.Slug, n int, err error) *MockCreateLoglineSource_SelectSlugIteration_Call {
	_c.Call.Return(slug, n, err)
	return _c
}

func (_c *MockCreateLoglineSource_SelectSlugIteration_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectSlugIterationData) (models.Slug, int, error)) *MockCreateLoglineSource_SelectSlugIteration_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateStoryPlanSource creates a new instance of MockCreateStoryPlanSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateStoryPlanSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateStoryPlanSource {
	mock := &MockCreateStoryPlanSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCreateStoryPlanSource is an autogenerated mock type for the CreateStoryPlanSource type
type MockCreateStoryPlanSource struct {
	mock.Mock
}

type MockCreateStoryPlanSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateStoryPlanSource) EXPECT() *MockCreateStoryPlanSource_Expecter {
	return &MockCreateStoryPlanSource_Expecter{mock: &_m.Mock}
}

// InsertStoryPlan provides a mock function for the type MockCreateStoryPlanSource
func (_mock *MockCreateStoryPlanSource) InsertStoryPlan(ctx context.Context, data dao.InsertStoryPlanData) (*dao.StoryPlanEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertStoryPlan")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertStoryPlanData) (*dao.StoryPlanEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertStoryPlanData) *dao.StoryPlanEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.InsertStoryPlanData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreateStoryPlanSource_InsertStoryPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertStoryPlan'
type MockCreateStoryPlanSource_InsertStoryPlan_Call struct {
	*mock.Call
}

// InsertStoryPlan is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockCreateStoryPlanSource_Expecter) InsertStoryPlan(ctx interface{}, data interface{}) *MockCreateStoryPlanSource_InsertStoryPlan_Call {
	return &MockCreateStoryPlanSource_InsertStoryPlan_Call{Call: _e.mock.On("InsertStoryPlan", ctx, data)}
}

func (_c *MockCreateStoryPlanSource_InsertStoryPlan_Call) Run(run func(ctx context.Context, data dao.InsertStoryPlanData)) *MockCreateStoryPlanSource_InsertStoryPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.InsertStoryPlanData))
	})
	return _c
}

func (_c *MockCreateStoryPlanSource_InsertStoryPlan_Call) Return(storyPlanEntity *dao.StoryPlanEntity, err error) *MockCreateStoryPlanSource_InsertStoryPlan_Call {
	_c.Call.Return(storyPlanEntity, err)
	return _c
}

func (_c *MockCreateStoryPlanSource_InsertStoryPlan_Call) RunAndReturn(run func(ctx context.Context, data dao.InsertStoryPlanData) (*dao.StoryPlanEntity, error)) *MockCreateStoryPlanSource_InsertStoryPlan_Call {
	_c.Call.Return(run)
	return _c
}

// SelectSlugIteration provides a mock function for the type MockCreateStoryPlanSource
func (_mock *MockCreateStoryPlanSource) SelectSlugIteration(ctx context.Context, data dao.SelectSlugIterationData) (models.Slug, int, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectSlugIteration")
	}

	var r0 models.Slug
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectSlugIterationData) (models.Slug, int, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectSlugIterationData) models.Slug); ok {
		r0 = returnFunc(ctx, data)
	} else {
		r0 = ret.Get(0).(models.Slug)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectSlugIterationData) int); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, dao.SelectSlugIterationData) error); ok {
		r2 = returnFunc(ctx, data)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCreateStoryPlanSource_SelectSlugIteration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectSlugIteration'
type MockCreateStoryPlanSource_SelectSlugIteration_Call struct {
	*mock.Call
}

// SelectSlugIteration is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockCreateStoryPlanSource_Expecter) SelectSlugIteration(ctx interface{}, data interface{}) *MockCreateStoryPlanSource_SelectSlugIteration_Call {
	return &MockCreateStoryPlanSource_SelectSlugIteration_Call{Call: _e.mock.On("SelectSlugIteration", ctx, data)}
}

func (_c *MockCreateStoryPlanSource_SelectSlugIteration_Call) Run(run func(ctx context.Context, data dao.SelectSlugIterationData)) *MockCreateStoryPlanSource_SelectSlugIteration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectSlugIterationData))
	})
	return _c
}

func (_c *MockCreateStoryPlanSource_SelectSlugIteration_Call) Return(slug models.Slug, n int, err error) *MockCreateStoryPlanSource_SelectSlugIteration_Call {
	_c.Call.Return(slug, n, err)
	return _c
}

func (_c *MockCreateStoryPlanSource_SelectSlugIteration_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectSlugIterationData) (models.Slug, int, error)) *MockCreateStoryPlanSource_SelectSlugIteration_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpandBeatSource creates a new instance of MockExpandBeatSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpandBeatSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpandBeatSource {
	mock := &MockExpandBeatSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExpandBeatSource is an autogenerated mock type for the ExpandBeatSource type
type MockExpandBeatSource struct {
	mock.Mock
}

type MockExpandBeatSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpandBeatSource) EXPECT() *MockExpandBeatSource_Expecter {
	return &MockExpandBeatSource_Expecter{mock: &_m.Mock}
}

// ExpandBeat provides a mock function for the type MockExpandBeatSource
func (_mock *MockExpandBeatSource) ExpandBeat(ctx context0.Context, request daoai.ExpandBeatRequest) (*models.Beat, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExpandBeat")
	}

	var r0 *models.Beat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context0.Context, daoai.ExpandBeatRequest) (*models.Beat, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context0.Context, daoai.ExpandBeatRequest) *models.Beat); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Beat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context0.Context, daoai.ExpandBeatRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExpandBeatSource_ExpandBeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpandBeat'
type MockExpandBeatSource_ExpandBeat_Call struct {
	*mock.Call
}

// ExpandBeat is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockExpandBeatSource_Expecter) ExpandBeat(ctx interface{}, request interface{}) *MockExpandBeatSource_ExpandBeat_Call {
	return &MockExpandBeatSource_ExpandBeat_Call{Call: _e.mock.On("ExpandBeat", ctx, request)}
}

func (_c *MockExpandBeatSource_ExpandBeat_Call) Run(run func(ctx context0.Context, request daoai.ExpandBeatRequest)) *MockExpandBeatSource_ExpandBeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context0.Context), args[1].(daoai.ExpandBeatRequest))
	})
	return _c
}

func (_c *MockExpandBeatSource_ExpandBeat_Call) Return(beat *models.Beat, err error) *MockExpandBeatSource_ExpandBeat_Call {
	_c.Call.Return(beat, err)
	return _c
}

func (_c *MockExpandBeatSource_ExpandBeat_Call) RunAndReturn(run func(ctx context0.Context, request daoai.ExpandBeatRequest) (*models.Beat, error)) *MockExpandBeatSource_ExpandBeat_Call {
	_c.Call.Return(run)
	return _c
}

// SelectBeatsSheet provides a mock function for the type MockExpandBeatSource
func (_mock *MockExpandBeatSource) SelectBeatsSheet(ctx context0.Context, data uuid.UUID) (*dao.BeatsSheetEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectBeatsSheet")
	}

	var r0 *dao.BeatsSheetEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context0.Context, uuid.UUID) (*dao.BeatsSheetEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context0.Context, uuid.UUID) *dao.BeatsSheetEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.BeatsSheetEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context0.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExpandBeatSource_SelectBeatsSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectBeatsSheet'
type MockExpandBeatSource_SelectBeatsSheet_Call struct {
	*mock.Call
}

// SelectBeatsSheet is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockExpandBeatSource_Expecter) SelectBeatsSheet(ctx interface{}, data interface{}) *MockExpandBeatSource_SelectBeatsSheet_Call {
	return &MockExpandBeatSource_SelectBeatsSheet_Call{Call: _e.mock.On("SelectBeatsSheet", ctx, data)}
}

func (_c *MockExpandBeatSource_SelectBeatsSheet_Call) Run(run func(ctx context0.Context, data uuid.UUID)) *MockExpandBeatSource_SelectBeatsSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context0.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockExpandBeatSource_SelectBeatsSheet_Call) Return(beatsSheetEntity *dao.BeatsSheetEntity, err error) *MockExpandBeatSource_SelectBeatsSheet_Call {
	_c.Call.Return(beatsSheetEntity, err)
	return _c
}

func (_c *MockExpandBeatSource_SelectBeatsSheet_Call) RunAndReturn(run func(ctx context0.Context, data uuid.UUID) (*dao.BeatsSheetEntity, error)) *MockExpandBeatSource_SelectBeatsSheet_Call {
	_c.Call.Return(run)
	return _c
}

// SelectLogline provides a mock function for the type MockExpandBeatSource
func (_mock *MockExpandBeatSource) SelectLogline(ctx context0.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectLogline")
	}

	var r0 *dao.LoglineEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context0.Context, dao.SelectLoglineData) (*dao.LoglineEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context0.Context, dao.SelectLoglineData) *dao.LoglineEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.LoglineEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context0.Context, dao.SelectLoglineData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExpandBeatSource_SelectLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLogline'
type MockExpandBeatSource_SelectLogline_Call struct {
	*mock.Call
}

// SelectLogline is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockExpandBeatSource_Expecter) SelectLogline(ctx interface{}, data interface{}) *MockExpandBeatSource_SelectLogline_Call {
	return &MockExpandBeatSource_SelectLogline_Call{Call: _e.mock.On("SelectLogline", ctx, data)}
}

func (_c *MockExpandBeatSource_SelectLogline_Call) Run(run func(ctx context0.Context, data dao.SelectLoglineData)) *MockExpandBeatSource_SelectLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context0.Context), args[1].(dao.SelectLoglineData))
	})
	return _c
}

func (_c *MockExpandBeatSource_SelectLogline_Call) Return(loglineEntity *dao.LoglineEntity, err error) *MockExpandBeatSource_SelectLogline_Call {
	_c.Call.Return(loglineEntity, err)
	return _c
}

func (_c *MockExpandBeatSource_SelectLogline_Call) RunAndReturn(run func(ctx context0.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error)) *MockExpandBeatSource_SelectLogline_Call {
	_c.Call.Return(run)
	return _c
}

// SelectStoryPlan provides a mock function for the type MockExpandBeatSource
func (_mock *MockExpandBeatSource) SelectStoryPlan(ctx context0.Context, data uuid.UUID) (*dao.StoryPlanEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectStoryPlan")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context0.Context, uuid.UUID) (*dao.StoryPlanEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context0.Context, uuid.UUID) *dao.StoryPlanEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context0.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExpandBeatSource_SelectStoryPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectStoryPlan'
type MockExpandBeatSource_SelectStoryPlan_Call struct {
	*mock.Call
}

// SelectStoryPlan is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockExpandBeatSource_Expecter) SelectStoryPlan(ctx interface{}, data interface{}) *MockExpandBeatSource_SelectStoryPlan_Call {
	return &MockExpandBeatSource_SelectStoryPlan_Call{Call: _e.mock.On("SelectStoryPlan", ctx, data)}
}

func (_c *MockExpandBeatSource_SelectStoryPlan_Call) Run(run func(ctx context0.Context, data uuid.UUID)) *MockExpandBeatSource_SelectStoryPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context0.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockExpandBeatSource_SelectStoryPlan_Call) Return(storyPlanEntity *dao.StoryPlanEntity, err error) *MockExpandBeatSource_SelectStoryPlan_Call {
	_c.Call.Return(storyPlanEntity, err)
	return _c
}

func (_c *MockExpandBeatSource_SelectStoryPlan_Call) RunAndReturn(run func(ctx context0.Context, data uuid.UUID) (*dao.StoryPlanEntity, error)) *MockExpandBeatSource_SelectStoryPlan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpandLoglineSource creates a new instance of MockExpandLoglineSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpandLoglineSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpandLoglineSource {
	mock := &MockExpandLoglineSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExpandLoglineSource is an autogenerated mock type for the ExpandLoglineSource type
type MockExpandLoglineSource struct {
	mock.Mock
}

type MockExpandLoglineSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpandLoglineSource) EXPECT() *MockExpandLoglineSource_Expecter {
	return &MockExpandLoglineSource_Expecter{mock: &_m.Mock}
}

// ExpandLogline provides a mock function for the type MockExpandLoglineSource
func (_mock *MockExpandLoglineSource) ExpandLogline(ctx context.Context, request daoai.ExpandLoglineRequest) (*models.LoglineIdea, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExpandLogline")
	}

	var r0 *models.LoglineIdea
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, daoai.ExpandLoglineRequest) (*models.LoglineIdea, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, daoai.ExpandLoglineRequest) *models.LoglineIdea); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoglineIdea)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, daoai.ExpandLoglineRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExpandLoglineSource_ExpandLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpandLogline'
type MockExpandLoglineSource_ExpandLogline_Call struct {
	*mock.Call
}

// ExpandLogline is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockExpandLoglineSource_Expecter) ExpandLogline(ctx interface{}, request interface{}) *MockExpandLoglineSource_ExpandLogline_Call {
	return &MockExpandLoglineSource_ExpandLogline_Call{Call: _e.mock.On("ExpandLogline", ctx, request)}
}

func (_c *MockExpandLoglineSource_ExpandLogline_Call) Run(run func(ctx context.Context, request daoai.ExpandLoglineRequest)) *MockExpandLoglineSource_ExpandLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(daoai.ExpandLoglineRequest))
	})
	return _c
}

func (_c *MockExpandLoglineSource_ExpandLogline_Call) Return(loglineIdea *models.LoglineIdea, err error) *MockExpandLoglineSource_ExpandLogline_Call {
	_c.Call.Return(loglineIdea, err)
	return _c
}

func (_c *MockExpandLoglineSource_ExpandLogline_Call) RunAndReturn(run func(ctx context.Context, request daoai.ExpandLoglineRequest) (*models.LoglineIdea, error)) *MockExpandLoglineSource_ExpandLogline_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerateBeatsSheetSource creates a new instance of MockGenerateBeatsSheetSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerateBeatsSheetSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerateBeatsSheetSource {
	mock := &MockGenerateBeatsSheetSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenerateBeatsSheetSource is an autogenerated mock type for the GenerateBeatsSheetSource type
type MockGenerateBeatsSheetSource struct {
	mock.Mock
}

type MockGenerateBeatsSheetSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerateBeatsSheetSource) EXPECT() *MockGenerateBeatsSheetSource_Expecter {
	return &MockGenerateBeatsSheetSource_Expecter{mock: &_m.Mock}
}

// GenerateBeatsSheet provides a mock function for the type MockGenerateBeatsSheetSource
func (_mock *MockGenerateBeatsSheetSource) GenerateBeatsSheet(ctx context.Context, request daoai.GenerateBeatsSheetRequest) ([]models.Beat, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GenerateBeatsSheet")
	}

	var r0 []models.Beat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, daoai.GenerateBeatsSheetRequest) ([]models.Beat, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, daoai.GenerateBeatsSheetRequest) []models.Beat); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Beat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, daoai.GenerateBeatsSheetRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateBeatsSheet'
type MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call struct {
	*mock.Call
}

// GenerateBeatsSheet is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockGenerateBeatsSheetSource_Expecter) GenerateBeatsSheet(ctx interface{}, request interface{}) *MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call {
	return &MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call{Call: _e.mock.On("GenerateBeatsSheet", ctx, request)}
}

func (_c *MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call) Run(run func(ctx context.Context, request daoai.GenerateBeatsSheetRequest)) *MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(daoai.GenerateBeatsSheetRequest))
	})
	return _c
}

func (_c *MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call) Return(beats []models.Beat, err error) *MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call {
	_c.Call.Return(beats, err)
	return _c
}

func (_c *MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call) RunAndReturn(run func(ctx context.Context, request daoai.GenerateBeatsSheetRequest) ([]models.Beat, error)) *MockGenerateBeatsSheetSource_GenerateBeatsSheet_Call {
	_c.Call.Return(run)
	return _c
}

// SelectLogline provides a mock function for the type MockGenerateBeatsSheetSource
func (_mock *MockGenerateBeatsSheetSource) SelectLogline(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectLogline")
	}

	var r0 *dao.LoglineEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) (*dao.LoglineEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) *dao.LoglineEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.LoglineEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectLoglineData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenerateBeatsSheetSource_SelectLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLogline'
type MockGenerateBeatsSheetSource_SelectLogline_Call struct {
	*mock.Call
}

// SelectLogline is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockGenerateBeatsSheetSource_Expecter) SelectLogline(ctx interface{}, data interface{}) *MockGenerateBeatsSheetSource_SelectLogline_Call {
	return &MockGenerateBeatsSheetSource_SelectLogline_Call{Call: _e.mock.On("SelectLogline", ctx, data)}
}

func (_c *MockGenerateBeatsSheetSource_SelectLogline_Call) Run(run func(ctx context.Context, data dao.SelectLoglineData)) *MockGenerateBeatsSheetSource_SelectLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectLoglineData))
	})
	return _c
}

func (_c *MockGenerateBeatsSheetSource_SelectLogline_Call) Return(loglineEntity *dao.LoglineEntity, err error) *MockGenerateBeatsSheetSource_SelectLogline_Call {
	_c.Call.Return(loglineEntity, err)
	return _c
}

func (_c *MockGenerateBeatsSheetSource_SelectLogline_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error)) *MockGenerateBeatsSheetSource_SelectLogline_Call {
	_c.Call.Return(run)
	return _c
}

// SelectStoryPlan provides a mock function for the type MockGenerateBeatsSheetSource
func (_mock *MockGenerateBeatsSheetSource) SelectStoryPlan(ctx context.Context, data uuid.UUID) (*dao.StoryPlanEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectStoryPlan")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.StoryPlanEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.StoryPlanEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenerateBeatsSheetSource_SelectStoryPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectStoryPlan'
type MockGenerateBeatsSheetSource_SelectStoryPlan_Call struct {
	*mock.Call
}

// SelectStoryPlan is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockGenerateBeatsSheetSource_Expecter) SelectStoryPlan(ctx interface{}, data interface{}) *MockGenerateBeatsSheetSource_SelectStoryPlan_Call {
	return &MockGenerateBeatsSheetSource_SelectStoryPlan_Call{Call: _e.mock.On("SelectStoryPlan", ctx, data)}
}

func (_c *MockGenerateBeatsSheetSource_SelectStoryPlan_Call) Run(run func(ctx context.Context, data uuid.UUID)) *MockGenerateBeatsSheetSource_SelectStoryPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockGenerateBeatsSheetSource_SelectStoryPlan_Call) Return(storyPlanEntity *dao.StoryPlanEntity, err error) *MockGenerateBeatsSheetSource_SelectStoryPlan_Call {
	_c.Call.Return(storyPlanEntity, err)
	return _c
}

func (_c *MockGenerateBeatsSheetSource_SelectStoryPlan_Call) RunAndReturn(run func(ctx context.Context, data uuid.UUID) (*dao.StoryPlanEntity, error)) *MockGenerateBeatsSheetSource_SelectStoryPlan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerateLoglinesSource creates a new instance of MockGenerateLoglinesSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerateLoglinesSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerateLoglinesSource {
	mock := &MockGenerateLoglinesSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenerateLoglinesSource is an autogenerated mock type for the GenerateLoglinesSource type
type MockGenerateLoglinesSource struct {
	mock.Mock
}

type MockGenerateLoglinesSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerateLoglinesSource) EXPECT() *MockGenerateLoglinesSource_Expecter {
	return &MockGenerateLoglinesSource_Expecter{mock: &_m.Mock}
}

// GenerateLoglines provides a mock function for the type MockGenerateLoglinesSource
func (_mock *MockGenerateLoglinesSource) GenerateLoglines(ctx context.Context, request daoai.GenerateLoglinesRequest) ([]models.LoglineIdea, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GenerateLoglines")
	}

	var r0 []models.LoglineIdea
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, daoai.GenerateLoglinesRequest) ([]models.LoglineIdea, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, daoai.GenerateLoglinesRequest) []models.LoglineIdea); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LoglineIdea)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, daoai.GenerateLoglinesRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenerateLoglinesSource_GenerateLoglines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateLoglines'
type MockGenerateLoglinesSource_GenerateLoglines_Call struct {
	*mock.Call
}

// GenerateLoglines is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockGenerateLoglinesSource_Expecter) GenerateLoglines(ctx interface{}, request interface{}) *MockGenerateLoglinesSource_GenerateLoglines_Call {
	return &MockGenerateLoglinesSource_GenerateLoglines_Call{Call: _e.mock.On("GenerateLoglines", ctx, request)}
}

func (_c *MockGenerateLoglinesSource_GenerateLoglines_Call) Run(run func(ctx context.Context, request daoai.GenerateLoglinesRequest)) *MockGenerateLoglinesSource_GenerateLoglines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(daoai.GenerateLoglinesRequest))
	})
	return _c
}

func (_c *MockGenerateLoglinesSource_GenerateLoglines_Call) Return(loglineIdeas []models.LoglineIdea, err error) *MockGenerateLoglinesSource_GenerateLoglines_Call {
	_c.Call.Return(loglineIdeas, err)
	return _c
}

func (_c *MockGenerateLoglinesSource_GenerateLoglines_Call) RunAndReturn(run func(ctx context.Context, request daoai.GenerateLoglinesRequest) ([]models.LoglineIdea, error)) *MockGenerateLoglinesSource_GenerateLoglines_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListBeatsSheetsSource creates a new instance of MockListBeatsSheetsSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListBeatsSheetsSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListBeatsSheetsSource {
	mock := &MockListBeatsSheetsSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockListBeatsSheetsSource is an autogenerated mock type for the ListBeatsSheetsSource type
type MockListBeatsSheetsSource struct {
	mock.Mock
}

type MockListBeatsSheetsSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListBeatsSheetsSource) EXPECT() *MockListBeatsSheetsSource_Expecter {
	return &MockListBeatsSheetsSource_Expecter{mock: &_m.Mock}
}

// ListBeatsSheets provides a mock function for the type MockListBeatsSheetsSource
func (_mock *MockListBeatsSheetsSource) ListBeatsSheets(ctx context.Context, data dao.ListBeatsSheetsData) ([]*dao.BeatsSheetPreviewEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for ListBeatsSheets")
	}

	var r0 []*dao.BeatsSheetPreviewEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.ListBeatsSheetsData) ([]*dao.BeatsSheetPreviewEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.ListBeatsSheetsData) []*dao.BeatsSheetPreviewEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.BeatsSheetPreviewEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.ListBeatsSheetsData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockListBeatsSheetsSource_ListBeatsSheets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBeatsSheets'
type MockListBeatsSheetsSource_ListBeatsSheets_Call struct {
	*mock.Call
}

// ListBeatsSheets is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockListBeatsSheetsSource_Expecter) ListBeatsSheets(ctx interface{}, data interface{}) *MockListBeatsSheetsSource_ListBeatsSheets_Call {
	return &MockListBeatsSheetsSource_ListBeatsSheets_Call{Call: _e.mock.On("ListBeatsSheets", ctx, data)}
}

func (_c *MockListBeatsSheetsSource_ListBeatsSheets_Call) Run(run func(ctx context.Context, data dao.ListBeatsSheetsData)) *MockListBeatsSheetsSource_ListBeatsSheets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.ListBeatsSheetsData))
	})
	return _c
}

func (_c *MockListBeatsSheetsSource_ListBeatsSheets_Call) Return(beatsSheetPreviewEntitys []*dao.BeatsSheetPreviewEntity, err error) *MockListBeatsSheetsSource_ListBeatsSheets_Call {
	_c.Call.Return(beatsSheetPreviewEntitys, err)
	return _c
}

func (_c *MockListBeatsSheetsSource_ListBeatsSheets_Call) RunAndReturn(run func(ctx context.Context, data dao.ListBeatsSheetsData) ([]*dao.BeatsSheetPreviewEntity, error)) *MockListBeatsSheetsSource_ListBeatsSheets_Call {
	_c.Call.Return(run)
	return _c
}

// SelectLogline provides a mock function for the type MockListBeatsSheetsSource
func (_mock *MockListBeatsSheetsSource) SelectLogline(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectLogline")
	}

	var r0 *dao.LoglineEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) (*dao.LoglineEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) *dao.LoglineEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.LoglineEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectLoglineData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockListBeatsSheetsSource_SelectLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLogline'
type MockListBeatsSheetsSource_SelectLogline_Call struct {
	*mock.Call
}

// SelectLogline is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockListBeatsSheetsSource_Expecter) SelectLogline(ctx interface{}, data interface{}) *MockListBeatsSheetsSource_SelectLogline_Call {
	return &MockListBeatsSheetsSource_SelectLogline_Call{Call: _e.mock.On("SelectLogline", ctx, data)}
}

func (_c *MockListBeatsSheetsSource_SelectLogline_Call) Run(run func(ctx context.Context, data dao.SelectLoglineData)) *MockListBeatsSheetsSource_SelectLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectLoglineData))
	})
	return _c
}

func (_c *MockListBeatsSheetsSource_SelectLogline_Call) Return(loglineEntity *dao.LoglineEntity, err error) *MockListBeatsSheetsSource_SelectLogline_Call {
	_c.Call.Return(loglineEntity, err)
	return _c
}

func (_c *MockListBeatsSheetsSource_SelectLogline_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error)) *MockListBeatsSheetsSource_SelectLogline_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListLoglinesSource creates a new instance of MockListLoglinesSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListLoglinesSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListLoglinesSource {
	mock := &MockListLoglinesSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockListLoglinesSource is an autogenerated mock type for the ListLoglinesSource type
type MockListLoglinesSource struct {
	mock.Mock
}

type MockListLoglinesSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListLoglinesSource) EXPECT() *MockListLoglinesSource_Expecter {
	return &MockListLoglinesSource_Expecter{mock: &_m.Mock}
}

// ListLoglines provides a mock function for the type MockListLoglinesSource
func (_mock *MockListLoglinesSource) ListLoglines(ctx context.Context, data dao.ListLoglinesData) ([]*dao.LoglinePreviewEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for ListLoglines")
	}

	var r0 []*dao.LoglinePreviewEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.ListLoglinesData) ([]*dao.LoglinePreviewEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.ListLoglinesData) []*dao.LoglinePreviewEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.LoglinePreviewEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.ListLoglinesData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockListLoglinesSource_ListLoglines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLoglines'
type MockListLoglinesSource_ListLoglines_Call struct {
	*mock.Call
}

// ListLoglines is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockListLoglinesSource_Expecter) ListLoglines(ctx interface{}, data interface{}) *MockListLoglinesSource_ListLoglines_Call {
	return &MockListLoglinesSource_ListLoglines_Call{Call: _e.mock.On("ListLoglines", ctx, data)}
}

func (_c *MockListLoglinesSource_ListLoglines_Call) Run(run func(ctx context.Context, data dao.ListLoglinesData)) *MockListLoglinesSource_ListLoglines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.ListLoglinesData))
	})
	return _c
}

func (_c *MockListLoglinesSource_ListLoglines_Call) Return(loglinePreviewEntitys []*dao.LoglinePreviewEntity, err error) *MockListLoglinesSource_ListLoglines_Call {
	_c.Call.Return(loglinePreviewEntitys, err)
	return _c
}

func (_c *MockListLoglinesSource_ListLoglines_Call) RunAndReturn(run func(ctx context.Context, data dao.ListLoglinesData) ([]*dao.LoglinePreviewEntity, error)) *MockListLoglinesSource_ListLoglines_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListStoryPlansSource creates a new instance of MockListStoryPlansSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListStoryPlansSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListStoryPlansSource {
	mock := &MockListStoryPlansSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockListStoryPlansSource is an autogenerated mock type for the ListStoryPlansSource type
type MockListStoryPlansSource struct {
	mock.Mock
}

type MockListStoryPlansSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListStoryPlansSource) EXPECT() *MockListStoryPlansSource_Expecter {
	return &MockListStoryPlansSource_Expecter{mock: &_m.Mock}
}

// ListStoryPlans provides a mock function for the type MockListStoryPlansSource
func (_mock *MockListStoryPlansSource) ListStoryPlans(ctx context.Context, data dao.ListStoryPlansData) ([]*dao.StoryPlanPreviewEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for ListStoryPlans")
	}

	var r0 []*dao.StoryPlanPreviewEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.ListStoryPlansData) ([]*dao.StoryPlanPreviewEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.ListStoryPlansData) []*dao.StoryPlanPreviewEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.StoryPlanPreviewEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.ListStoryPlansData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockListStoryPlansSource_ListStoryPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStoryPlans'
type MockListStoryPlansSource_ListStoryPlans_Call struct {
	*mock.Call
}

// ListStoryPlans is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockListStoryPlansSource_Expecter) ListStoryPlans(ctx interface{}, data interface{}) *MockListStoryPlansSource_ListStoryPlans_Call {
	return &MockListStoryPlansSource_ListStoryPlans_Call{Call: _e.mock.On("ListStoryPlans", ctx, data)}
}

func (_c *MockListStoryPlansSource_ListStoryPlans_Call) Run(run func(ctx context.Context, data dao.ListStoryPlansData)) *MockListStoryPlansSource_ListStoryPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.ListStoryPlansData))
	})
	return _c
}

func (_c *MockListStoryPlansSource_ListStoryPlans_Call) Return(storyPlanPreviewEntitys []*dao.StoryPlanPreviewEntity, err error) *MockListStoryPlansSource_ListStoryPlans_Call {
	_c.Call.Return(storyPlanPreviewEntitys, err)
	return _c
}

func (_c *MockListStoryPlansSource_ListStoryPlans_Call) RunAndReturn(run func(ctx context.Context, data dao.ListStoryPlansData) ([]*dao.StoryPlanPreviewEntity, error)) *MockListStoryPlansSource_ListStoryPlans_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegenerateBeatsSource creates a new instance of MockRegenerateBeatsSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegenerateBeatsSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegenerateBeatsSource {
	mock := &MockRegenerateBeatsSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegenerateBeatsSource is an autogenerated mock type for the RegenerateBeatsSource type
type MockRegenerateBeatsSource struct {
	mock.Mock
}

type MockRegenerateBeatsSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegenerateBeatsSource) EXPECT() *MockRegenerateBeatsSource_Expecter {
	return &MockRegenerateBeatsSource_Expecter{mock: &_m.Mock}
}

// RegenerateBeats provides a mock function for the type MockRegenerateBeatsSource
func (_mock *MockRegenerateBeatsSource) RegenerateBeats(ctx context.Context, request daoai.RegenerateBeatsRequest) ([]models.Beat, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateBeats")
	}

	var r0 []models.Beat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, daoai.RegenerateBeatsRequest) ([]models.Beat, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, daoai.RegenerateBeatsRequest) []models.Beat); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Beat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, daoai.RegenerateBeatsRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegenerateBeatsSource_RegenerateBeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateBeats'
type MockRegenerateBeatsSource_RegenerateBeats_Call struct {
	*mock.Call
}

// RegenerateBeats is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockRegenerateBeatsSource_Expecter) RegenerateBeats(ctx interface{}, request interface{}) *MockRegenerateBeatsSource_RegenerateBeats_Call {
	return &MockRegenerateBeatsSource_RegenerateBeats_Call{Call: _e.mock.On("RegenerateBeats", ctx, request)}
}

func (_c *MockRegenerateBeatsSource_RegenerateBeats_Call) Run(run func(ctx context.Context, request daoai.RegenerateBeatsRequest)) *MockRegenerateBeatsSource_RegenerateBeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(daoai.RegenerateBeatsRequest))
	})
	return _c
}

func (_c *MockRegenerateBeatsSource_RegenerateBeats_Call) Return(beats []models.Beat, err error) *MockRegenerateBeatsSource_RegenerateBeats_Call {
	_c.Call.Return(beats, err)
	return _c
}

func (_c *MockRegenerateBeatsSource_RegenerateBeats_Call) RunAndReturn(run func(ctx context.Context, request daoai.RegenerateBeatsRequest) ([]models.Beat, error)) *MockRegenerateBeatsSource_RegenerateBeats_Call {
	_c.Call.Return(run)
	return _c
}

// SelectBeatsSheet provides a mock function for the type MockRegenerateBeatsSource
func (_mock *MockRegenerateBeatsSource) SelectBeatsSheet(ctx context.Context, data uuid.UUID) (*dao.BeatsSheetEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectBeatsSheet")
	}

	var r0 *dao.BeatsSheetEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.BeatsSheetEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.BeatsSheetEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.BeatsSheetEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegenerateBeatsSource_SelectBeatsSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectBeatsSheet'
type MockRegenerateBeatsSource_SelectBeatsSheet_Call struct {
	*mock.Call
}

// SelectBeatsSheet is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockRegenerateBeatsSource_Expecter) SelectBeatsSheet(ctx interface{}, data interface{}) *MockRegenerateBeatsSource_SelectBeatsSheet_Call {
	return &MockRegenerateBeatsSource_SelectBeatsSheet_Call{Call: _e.mock.On("SelectBeatsSheet", ctx, data)}
}

func (_c *MockRegenerateBeatsSource_SelectBeatsSheet_Call) Run(run func(ctx context.Context, data uuid.UUID)) *MockRegenerateBeatsSource_SelectBeatsSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRegenerateBeatsSource_SelectBeatsSheet_Call) Return(beatsSheetEntity *dao.BeatsSheetEntity, err error) *MockRegenerateBeatsSource_SelectBeatsSheet_Call {
	_c.Call.Return(beatsSheetEntity, err)
	return _c
}

func (_c *MockRegenerateBeatsSource_SelectBeatsSheet_Call) RunAndReturn(run func(ctx context.Context, data uuid.UUID) (*dao.BeatsSheetEntity, error)) *MockRegenerateBeatsSource_SelectBeatsSheet_Call {
	_c.Call.Return(run)
	return _c
}

// SelectLogline provides a mock function for the type MockRegenerateBeatsSource
func (_mock *MockRegenerateBeatsSource) SelectLogline(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectLogline")
	}

	var r0 *dao.LoglineEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) (*dao.LoglineEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) *dao.LoglineEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.LoglineEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectLoglineData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegenerateBeatsSource_SelectLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLogline'
type MockRegenerateBeatsSource_SelectLogline_Call struct {
	*mock.Call
}

// SelectLogline is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockRegenerateBeatsSource_Expecter) SelectLogline(ctx interface{}, data interface{}) *MockRegenerateBeatsSource_SelectLogline_Call {
	return &MockRegenerateBeatsSource_SelectLogline_Call{Call: _e.mock.On("SelectLogline", ctx, data)}
}

func (_c *MockRegenerateBeatsSource_SelectLogline_Call) Run(run func(ctx context.Context, data dao.SelectLoglineData)) *MockRegenerateBeatsSource_SelectLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectLoglineData))
	})
	return _c
}

func (_c *MockRegenerateBeatsSource_SelectLogline_Call) Return(loglineEntity *dao.LoglineEntity, err error) *MockRegenerateBeatsSource_SelectLogline_Call {
	_c.Call.Return(loglineEntity, err)
	return _c
}

func (_c *MockRegenerateBeatsSource_SelectLogline_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error)) *MockRegenerateBeatsSource_SelectLogline_Call {
	_c.Call.Return(run)
	return _c
}

// SelectStoryPlan provides a mock function for the type MockRegenerateBeatsSource
func (_mock *MockRegenerateBeatsSource) SelectStoryPlan(ctx context.Context, data uuid.UUID) (*dao.StoryPlanEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectStoryPlan")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.StoryPlanEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.StoryPlanEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegenerateBeatsSource_SelectStoryPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectStoryPlan'
type MockRegenerateBeatsSource_SelectStoryPlan_Call struct {
	*mock.Call
}

// SelectStoryPlan is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockRegenerateBeatsSource_Expecter) SelectStoryPlan(ctx interface{}, data interface{}) *MockRegenerateBeatsSource_SelectStoryPlan_Call {
	return &MockRegenerateBeatsSource_SelectStoryPlan_Call{Call: _e.mock.On("SelectStoryPlan", ctx, data)}
}

func (_c *MockRegenerateBeatsSource_SelectStoryPlan_Call) Run(run func(ctx context.Context, data uuid.UUID)) *MockRegenerateBeatsSource_SelectStoryPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRegenerateBeatsSource_SelectStoryPlan_Call) Return(storyPlanEntity *dao.StoryPlanEntity, err error) *MockRegenerateBeatsSource_SelectStoryPlan_Call {
	_c.Call.Return(storyPlanEntity, err)
	return _c
}

func (_c *MockRegenerateBeatsSource_SelectStoryPlan_Call) RunAndReturn(run func(ctx context.Context, data uuid.UUID) (*dao.StoryPlanEntity, error)) *MockRegenerateBeatsSource_SelectStoryPlan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelectBeatsSheetSource creates a new instance of MockSelectBeatsSheetSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectBeatsSheetSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectBeatsSheetSource {
	mock := &MockSelectBeatsSheetSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSelectBeatsSheetSource is an autogenerated mock type for the SelectBeatsSheetSource type
type MockSelectBeatsSheetSource struct {
	mock.Mock
}

type MockSelectBeatsSheetSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectBeatsSheetSource) EXPECT() *MockSelectBeatsSheetSource_Expecter {
	return &MockSelectBeatsSheetSource_Expecter{mock: &_m.Mock}
}

// SelectBeatsSheet provides a mock function for the type MockSelectBeatsSheetSource
func (_mock *MockSelectBeatsSheetSource) SelectBeatsSheet(ctx context.Context, data uuid.UUID) (*dao.BeatsSheetEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectBeatsSheet")
	}

	var r0 *dao.BeatsSheetEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.BeatsSheetEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.BeatsSheetEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.BeatsSheetEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectBeatsSheetSource_SelectBeatsSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectBeatsSheet'
type MockSelectBeatsSheetSource_SelectBeatsSheet_Call struct {
	*mock.Call
}

// SelectBeatsSheet is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockSelectBeatsSheetSource_Expecter) SelectBeatsSheet(ctx interface{}, data interface{}) *MockSelectBeatsSheetSource_SelectBeatsSheet_Call {
	return &MockSelectBeatsSheetSource_SelectBeatsSheet_Call{Call: _e.mock.On("SelectBeatsSheet", ctx, data)}
}

func (_c *MockSelectBeatsSheetSource_SelectBeatsSheet_Call) Run(run func(ctx context.Context, data uuid.UUID)) *MockSelectBeatsSheetSource_SelectBeatsSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSelectBeatsSheetSource_SelectBeatsSheet_Call) Return(beatsSheetEntity *dao.BeatsSheetEntity, err error) *MockSelectBeatsSheetSource_SelectBeatsSheet_Call {
	_c.Call.Return(beatsSheetEntity, err)
	return _c
}

func (_c *MockSelectBeatsSheetSource_SelectBeatsSheet_Call) RunAndReturn(run func(ctx context.Context, data uuid.UUID) (*dao.BeatsSheetEntity, error)) *MockSelectBeatsSheetSource_SelectBeatsSheet_Call {
	_c.Call.Return(run)
	return _c
}

// SelectLogline provides a mock function for the type MockSelectBeatsSheetSource
func (_mock *MockSelectBeatsSheetSource) SelectLogline(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectLogline")
	}

	var r0 *dao.LoglineEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) (*dao.LoglineEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) *dao.LoglineEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.LoglineEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectLoglineData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectBeatsSheetSource_SelectLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLogline'
type MockSelectBeatsSheetSource_SelectLogline_Call struct {
	*mock.Call
}

// SelectLogline is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockSelectBeatsSheetSource_Expecter) SelectLogline(ctx interface{}, data interface{}) *MockSelectBeatsSheetSource_SelectLogline_Call {
	return &MockSelectBeatsSheetSource_SelectLogline_Call{Call: _e.mock.On("SelectLogline", ctx, data)}
}

func (_c *MockSelectBeatsSheetSource_SelectLogline_Call) Run(run func(ctx context.Context, data dao.SelectLoglineData)) *MockSelectBeatsSheetSource_SelectLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectLoglineData))
	})
	return _c
}

func (_c *MockSelectBeatsSheetSource_SelectLogline_Call) Return(loglineEntity *dao.LoglineEntity, err error) *MockSelectBeatsSheetSource_SelectLogline_Call {
	_c.Call.Return(loglineEntity, err)
	return _c
}

func (_c *MockSelectBeatsSheetSource_SelectLogline_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error)) *MockSelectBeatsSheetSource_SelectLogline_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelectLoglineSource creates a new instance of MockSelectLoglineSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectLoglineSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectLoglineSource {
	mock := &MockSelectLoglineSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSelectLoglineSource is an autogenerated mock type for the SelectLoglineSource type
type MockSelectLoglineSource struct {
	mock.Mock
}

type MockSelectLoglineSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectLoglineSource) EXPECT() *MockSelectLoglineSource_Expecter {
	return &MockSelectLoglineSource_Expecter{mock: &_m.Mock}
}

// SelectLogline provides a mock function for the type MockSelectLoglineSource
func (_mock *MockSelectLoglineSource) SelectLogline(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectLogline")
	}

	var r0 *dao.LoglineEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) (*dao.LoglineEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineData) *dao.LoglineEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.LoglineEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectLoglineData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectLoglineSource_SelectLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLogline'
type MockSelectLoglineSource_SelectLogline_Call struct {
	*mock.Call
}

// SelectLogline is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockSelectLoglineSource_Expecter) SelectLogline(ctx interface{}, data interface{}) *MockSelectLoglineSource_SelectLogline_Call {
	return &MockSelectLoglineSource_SelectLogline_Call{Call: _e.mock.On("SelectLogline", ctx, data)}
}

func (_c *MockSelectLoglineSource_SelectLogline_Call) Run(run func(ctx context.Context, data dao.SelectLoglineData)) *MockSelectLoglineSource_SelectLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectLoglineData))
	})
	return _c
}

func (_c *MockSelectLoglineSource_SelectLogline_Call) Return(loglineEntity *dao.LoglineEntity, err error) *MockSelectLoglineSource_SelectLogline_Call {
	_c.Call.Return(loglineEntity, err)
	return _c
}

func (_c *MockSelectLoglineSource_SelectLogline_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectLoglineData) (*dao.LoglineEntity, error)) *MockSelectLoglineSource_SelectLogline_Call {
	_c.Call.Return(run)
	return _c
}

// SelectLoglineBySlug provides a mock function for the type MockSelectLoglineSource
func (_mock *MockSelectLoglineSource) SelectLoglineBySlug(ctx context.Context, data dao.SelectLoglineBySlugData) (*dao.LoglineEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectLoglineBySlug")
	}

	var r0 *dao.LoglineEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineBySlugData) (*dao.LoglineEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.SelectLoglineBySlugData) *dao.LoglineEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.LoglineEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.SelectLoglineBySlugData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectLoglineSource_SelectLoglineBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLoglineBySlug'
type MockSelectLoglineSource_SelectLoglineBySlug_Call struct {
	*mock.Call
}

// SelectLoglineBySlug is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockSelectLoglineSource_Expecter) SelectLoglineBySlug(ctx interface{}, data interface{}) *MockSelectLoglineSource_SelectLoglineBySlug_Call {
	return &MockSelectLoglineSource_SelectLoglineBySlug_Call{Call: _e.mock.On("SelectLoglineBySlug", ctx, data)}
}

func (_c *MockSelectLoglineSource_SelectLoglineBySlug_Call) Run(run func(ctx context.Context, data dao.SelectLoglineBySlugData)) *MockSelectLoglineSource_SelectLoglineBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectLoglineBySlugData))
	})
	return _c
}

func (_c *MockSelectLoglineSource_SelectLoglineBySlug_Call) Return(loglineEntity *dao.LoglineEntity, err error) *MockSelectLoglineSource_SelectLoglineBySlug_Call {
	_c.Call.Return(loglineEntity, err)
	return _c
}

func (_c *MockSelectLoglineSource_SelectLoglineBySlug_Call) RunAndReturn(run func(ctx context.Context, data dao.SelectLoglineBySlugData) (*dao.LoglineEntity, error)) *MockSelectLoglineSource_SelectLoglineBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelectStoryPlanSource creates a new instance of MockSelectStoryPlanSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectStoryPlanSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectStoryPlanSource {
	mock := &MockSelectStoryPlanSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSelectStoryPlanSource is an autogenerated mock type for the SelectStoryPlanSource type
type MockSelectStoryPlanSource struct {
	mock.Mock
}

type MockSelectStoryPlanSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectStoryPlanSource) EXPECT() *MockSelectStoryPlanSource_Expecter {
	return &MockSelectStoryPlanSource_Expecter{mock: &_m.Mock}
}

// SelectStoryPlan provides a mock function for the type MockSelectStoryPlanSource
func (_mock *MockSelectStoryPlanSource) SelectStoryPlan(ctx context.Context, data uuid.UUID) (*dao.StoryPlanEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectStoryPlan")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.StoryPlanEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.StoryPlanEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectStoryPlanSource_SelectStoryPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectStoryPlan'
type MockSelectStoryPlanSource_SelectStoryPlan_Call struct {
	*mock.Call
}

// SelectStoryPlan is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockSelectStoryPlanSource_Expecter) SelectStoryPlan(ctx interface{}, data interface{}) *MockSelectStoryPlanSource_SelectStoryPlan_Call {
	return &MockSelectStoryPlanSource_SelectStoryPlan_Call{Call: _e.mock.On("SelectStoryPlan", ctx, data)}
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlan_Call) Run(run func(ctx context.Context, data uuid.UUID)) *MockSelectStoryPlanSource_SelectStoryPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlan_Call) Return(storyPlanEntity *dao.StoryPlanEntity, err error) *MockSelectStoryPlanSource_SelectStoryPlan_Call {
	_c.Call.Return(storyPlanEntity, err)
	return _c
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlan_Call) RunAndReturn(run func(ctx context.Context, data uuid.UUID) (*dao.StoryPlanEntity, error)) *MockSelectStoryPlanSource_SelectStoryPlan_Call {
	_c.Call.Return(run)
	return _c
}

// SelectStoryPlanBySlug provides a mock function for the type MockSelectStoryPlanSource
func (_mock *MockSelectStoryPlanSource) SelectStoryPlanBySlug(ctx context.Context, data models.Slug) (*dao.StoryPlanEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectStoryPlanBySlug")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Slug) (*dao.StoryPlanEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Slug) *dao.StoryPlanEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Slug) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectStoryPlanBySlug'
type MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call struct {
	*mock.Call
}

// SelectStoryPlanBySlug is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockSelectStoryPlanSource_Expecter) SelectStoryPlanBySlug(ctx interface{}, data interface{}) *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call {
	return &MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call{Call: _e.mock.On("SelectStoryPlanBySlug", ctx, data)}
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call) Run(run func(ctx context.Context, data models.Slug)) *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Slug))
	})
	return _c
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call) Return(storyPlanEntity *dao.StoryPlanEntity, err error) *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call {
	_c.Call.Return(storyPlanEntity, err)
	return _c
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call) RunAndReturn(run func(ctx context.Context, data models.Slug) (*dao.StoryPlanEntity, error)) *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateStoryPlanSource creates a new instance of MockUpdateStoryPlanSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateStoryPlanSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateStoryPlanSource {
	mock := &MockUpdateStoryPlanSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdateStoryPlanSource is an autogenerated mock type for the UpdateStoryPlanSource type
type MockUpdateStoryPlanSource struct {
	mock.Mock
}

type MockUpdateStoryPlanSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateStoryPlanSource) EXPECT() *MockUpdateStoryPlanSource_Expecter {
	return &MockUpdateStoryPlanSource_Expecter{mock: &_m.Mock}
}

// UpdateStoryPlan provides a mock function for the type MockUpdateStoryPlanSource
func (_mock *MockUpdateStoryPlanSource) UpdateStoryPlan(ctx context.Context, data dao.UpdateStoryPlanData) (*dao.StoryPlanEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoryPlan")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.UpdateStoryPlanData) (*dao.StoryPlanEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.UpdateStoryPlanData) *dao.StoryPlanEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.UpdateStoryPlanData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdateStoryPlanSource_UpdateStoryPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStoryPlan'
type MockUpdateStoryPlanSource_UpdateStoryPlan_Call struct {
	*mock.Call
}

// UpdateStoryPlan is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockUpdateStoryPlanSource_Expecter) UpdateStoryPlan(ctx interface{}, data interface{}) *MockUpdateStoryPlanSource_UpdateStoryPlan_Call {
	return &MockUpdateStoryPlanSource_UpdateStoryPlan_Call{Call: _e.mock.On("UpdateStoryPlan", ctx, data)}
}

func (_c *MockUpdateStoryPlanSource_UpdateStoryPlan_Call) Run(run func(ctx context.Context, data dao.UpdateStoryPlanData)) *MockUpdateStoryPlanSource_UpdateStoryPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.UpdateStoryPlanData))
	})
	return _c
}

func (_c *MockUpdateStoryPlanSource_UpdateStoryPlan_Call) Return(storyPlanEntity *dao.StoryPlanEntity, err error) *MockUpdateStoryPlanSource_UpdateStoryPlan_Call {
	_c.Call.Return(storyPlanEntity, err)
	return _c
}

func (_c *MockUpdateStoryPlanSource_UpdateStoryPlan_Call) RunAndReturn(run func(ctx context.Context, data dao.UpdateStoryPlanData) (*dao.StoryPlanEntity, error)) *MockUpdateStoryPlanSource_UpdateStoryPlan_Call {
	_c.Call.Return(run)
	return _c
}
