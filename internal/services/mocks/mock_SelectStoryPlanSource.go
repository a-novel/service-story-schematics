// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/story-schematics/internal/dao"
	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/story-schematics/models"

	uuid "github.com/google/uuid"
)

// MockSelectStoryPlanSource is an autogenerated mock type for the SelectStoryPlanSource type
type MockSelectStoryPlanSource struct {
	mock.Mock
}

type MockSelectStoryPlanSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectStoryPlanSource) EXPECT() *MockSelectStoryPlanSource_Expecter {
	return &MockSelectStoryPlanSource_Expecter{mock: &_m.Mock}
}

// SelectStoryPlan provides a mock function with given fields: ctx, data
func (_m *MockSelectStoryPlanSource) SelectStoryPlan(ctx context.Context, data uuid.UUID) (*dao.StoryPlanEntity, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectStoryPlan")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.StoryPlanEntity, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.StoryPlanEntity); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSelectStoryPlanSource_SelectStoryPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectStoryPlan'
type MockSelectStoryPlanSource_SelectStoryPlan_Call struct {
	*mock.Call
}

// SelectStoryPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - data uuid.UUID
func (_e *MockSelectStoryPlanSource_Expecter) SelectStoryPlan(ctx interface{}, data interface{}) *MockSelectStoryPlanSource_SelectStoryPlan_Call {
	return &MockSelectStoryPlanSource_SelectStoryPlan_Call{Call: _e.mock.On("SelectStoryPlan", ctx, data)}
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlan_Call) Run(run func(ctx context.Context, data uuid.UUID)) *MockSelectStoryPlanSource_SelectStoryPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlan_Call) Return(_a0 *dao.StoryPlanEntity, _a1 error) *MockSelectStoryPlanSource_SelectStoryPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlan_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dao.StoryPlanEntity, error)) *MockSelectStoryPlanSource_SelectStoryPlan_Call {
	_c.Call.Return(run)
	return _c
}

// SelectStoryPlanBySlug provides a mock function with given fields: ctx, data
func (_m *MockSelectStoryPlanSource) SelectStoryPlanBySlug(ctx context.Context, data models.Slug) (*dao.StoryPlanEntity, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectStoryPlanBySlug")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Slug) (*dao.StoryPlanEntity, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Slug) *dao.StoryPlanEntity); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Slug) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectStoryPlanBySlug'
type MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call struct {
	*mock.Call
}

// SelectStoryPlanBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - data models.Slug
func (_e *MockSelectStoryPlanSource_Expecter) SelectStoryPlanBySlug(ctx interface{}, data interface{}) *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call {
	return &MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call{Call: _e.mock.On("SelectStoryPlanBySlug", ctx, data)}
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call) Run(run func(ctx context.Context, data models.Slug)) *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Slug))
	})
	return _c
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call) Return(_a0 *dao.StoryPlanEntity, _a1 error) *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call) RunAndReturn(run func(context.Context, models.Slug) (*dao.StoryPlanEntity, error)) *MockSelectStoryPlanSource_SelectStoryPlanBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelectStoryPlanSource creates a new instance of MockSelectStoryPlanSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectStoryPlanSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectStoryPlanSource {
	mock := &MockSelectStoryPlanSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
