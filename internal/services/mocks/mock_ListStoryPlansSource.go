// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/story-schematics/internal/dao"
	mock "github.com/stretchr/testify/mock"
)

// MockListStoryPlansSource is an autogenerated mock type for the ListStoryPlansSource type
type MockListStoryPlansSource struct {
	mock.Mock
}

type MockListStoryPlansSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListStoryPlansSource) EXPECT() *MockListStoryPlansSource_Expecter {
	return &MockListStoryPlansSource_Expecter{mock: &_m.Mock}
}

// ListStoryPlans provides a mock function with given fields: ctx, data
func (_m *MockListStoryPlansSource) ListStoryPlans(ctx context.Context, data dao.ListStoryPlansData) ([]*dao.StoryPlanPreviewEntity, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for ListStoryPlans")
	}

	var r0 []*dao.StoryPlanPreviewEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.ListStoryPlansData) ([]*dao.StoryPlanPreviewEntity, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.ListStoryPlansData) []*dao.StoryPlanPreviewEntity); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.StoryPlanPreviewEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.ListStoryPlansData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListStoryPlansSource_ListStoryPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStoryPlans'
type MockListStoryPlansSource_ListStoryPlans_Call struct {
	*mock.Call
}

// ListStoryPlans is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.ListStoryPlansData
func (_e *MockListStoryPlansSource_Expecter) ListStoryPlans(ctx interface{}, data interface{}) *MockListStoryPlansSource_ListStoryPlans_Call {
	return &MockListStoryPlansSource_ListStoryPlans_Call{Call: _e.mock.On("ListStoryPlans", ctx, data)}
}

func (_c *MockListStoryPlansSource_ListStoryPlans_Call) Run(run func(ctx context.Context, data dao.ListStoryPlansData)) *MockListStoryPlansSource_ListStoryPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.ListStoryPlansData))
	})
	return _c
}

func (_c *MockListStoryPlansSource_ListStoryPlans_Call) Return(_a0 []*dao.StoryPlanPreviewEntity, _a1 error) *MockListStoryPlansSource_ListStoryPlans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListStoryPlansSource_ListStoryPlans_Call) RunAndReturn(run func(context.Context, dao.ListStoryPlansData) ([]*dao.StoryPlanPreviewEntity, error)) *MockListStoryPlansSource_ListStoryPlans_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListStoryPlansSource creates a new instance of MockListStoryPlansSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListStoryPlansSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListStoryPlansSource {
	mock := &MockListStoryPlansSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
