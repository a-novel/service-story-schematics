// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/service-story-schematics/internal/dao"
	mock "github.com/stretchr/testify/mock"
)

// MockUpdateStoryPlanSource is an autogenerated mock type for the UpdateStoryPlanSource type
type MockUpdateStoryPlanSource struct {
	mock.Mock
}

type MockUpdateStoryPlanSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateStoryPlanSource) EXPECT() *MockUpdateStoryPlanSource_Expecter {
	return &MockUpdateStoryPlanSource_Expecter{mock: &_m.Mock}
}

// UpdateStoryPlan provides a mock function with given fields: ctx, data
func (_m *MockUpdateStoryPlanSource) UpdateStoryPlan(ctx context.Context, data dao.UpdateStoryPlanData) (*dao.StoryPlanEntity, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoryPlan")
	}

	var r0 *dao.StoryPlanEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.UpdateStoryPlanData) (*dao.StoryPlanEntity, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.UpdateStoryPlanData) *dao.StoryPlanEntity); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.StoryPlanEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.UpdateStoryPlanData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpdateStoryPlanSource_UpdateStoryPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStoryPlan'
type MockUpdateStoryPlanSource_UpdateStoryPlan_Call struct {
	*mock.Call
}

// UpdateStoryPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.UpdateStoryPlanData
func (_e *MockUpdateStoryPlanSource_Expecter) UpdateStoryPlan(ctx interface{}, data interface{}) *MockUpdateStoryPlanSource_UpdateStoryPlan_Call {
	return &MockUpdateStoryPlanSource_UpdateStoryPlan_Call{Call: _e.mock.On("UpdateStoryPlan", ctx, data)}
}

func (_c *MockUpdateStoryPlanSource_UpdateStoryPlan_Call) Run(run func(ctx context.Context, data dao.UpdateStoryPlanData)) *MockUpdateStoryPlanSource_UpdateStoryPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.UpdateStoryPlanData))
	})
	return _c
}

func (_c *MockUpdateStoryPlanSource_UpdateStoryPlan_Call) Return(_a0 *dao.StoryPlanEntity, _a1 error) *MockUpdateStoryPlanSource_UpdateStoryPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpdateStoryPlanSource_UpdateStoryPlan_Call) RunAndReturn(run func(context.Context, dao.UpdateStoryPlanData) (*dao.StoryPlanEntity, error)) *MockUpdateStoryPlanSource_UpdateStoryPlan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateStoryPlanSource creates a new instance of MockUpdateStoryPlanSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateStoryPlanSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateStoryPlanSource {
	mock := &MockUpdateStoryPlanSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
