// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	daoai "github.com/a-novel/story-schematics/internal/daoai"
	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/story-schematics/models"
)

// MockExpandLoglineSource is an autogenerated mock type for the ExpandLoglineSource type
type MockExpandLoglineSource struct {
	mock.Mock
}

type MockExpandLoglineSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpandLoglineSource) EXPECT() *MockExpandLoglineSource_Expecter {
	return &MockExpandLoglineSource_Expecter{mock: &_m.Mock}
}

// ExpandLogline provides a mock function with given fields: ctx, request
func (_m *MockExpandLoglineSource) ExpandLogline(ctx context.Context, request daoai.ExpandLoglineRequest) (*models.LoglineIdea, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExpandLogline")
	}

	var r0 *models.LoglineIdea
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, daoai.ExpandLoglineRequest) (*models.LoglineIdea, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, daoai.ExpandLoglineRequest) *models.LoglineIdea); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoglineIdea)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, daoai.ExpandLoglineRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExpandLoglineSource_ExpandLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpandLogline'
type MockExpandLoglineSource_ExpandLogline_Call struct {
	*mock.Call
}

// ExpandLogline is a helper method to define mock.On call
//   - ctx context.Context
//   - request daoai.ExpandLoglineRequest
func (_e *MockExpandLoglineSource_Expecter) ExpandLogline(ctx interface{}, request interface{}) *MockExpandLoglineSource_ExpandLogline_Call {
	return &MockExpandLoglineSource_ExpandLogline_Call{Call: _e.mock.On("ExpandLogline", ctx, request)}
}

func (_c *MockExpandLoglineSource_ExpandLogline_Call) Run(run func(ctx context.Context, request daoai.ExpandLoglineRequest)) *MockExpandLoglineSource_ExpandLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(daoai.ExpandLoglineRequest))
	})
	return _c
}

func (_c *MockExpandLoglineSource_ExpandLogline_Call) Return(_a0 *models.LoglineIdea, _a1 error) *MockExpandLoglineSource_ExpandLogline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExpandLoglineSource_ExpandLogline_Call) RunAndReturn(run func(context.Context, daoai.ExpandLoglineRequest) (*models.LoglineIdea, error)) *MockExpandLoglineSource_ExpandLogline_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpandLoglineSource creates a new instance of MockExpandLoglineSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpandLoglineSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpandLoglineSource {
	mock := &MockExpandLoglineSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
