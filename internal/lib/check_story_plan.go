package lib

import (
	"errors"
	"fmt"
	"strings"

	"github.com/a-novel/story-schematics/models"
)

var ErrInvalidStoryPlan = errors.New("CheckStoryPlan")

// CheckStoryPlan checks if the beats generated by the model match the expected beats of a story plan.
func CheckStoryPlan(beats []models.Beat, beatsDefinitions []models.BeatDefinition) error {
	definitionBeats := map[string]int{}
	generatedBeats := map[string]int{}

	var missingBeats []string

	var unknownBeats []string

	misplacedBeats := map[string]struct {
		expected int
		actual   int
	}{}

	for i, definition := range beatsDefinitions {
		definitionBeats[definition.Key] = i
	}

	for i, beat := range beats {
		generatedBeats[beat.Key] = i
	}

	for key, i := range definitionBeats {
		matched, ok := generatedBeats[key]
		if !ok {
			missingBeats = append(missingBeats, key)

			continue
		}

		if matched != i {
			misplacedBeats[key] = struct {
				expected int
				actual   int
			}{expected: i, actual: matched}
		}
	}

	for key := range generatedBeats {
		if _, ok := definitionBeats[key]; !ok {
			unknownBeats = append(unknownBeats, key)
		}
	}

	var errs []error

	if len(missingBeats) > 0 {
		errs = append(errs, fmt.Errorf("missing beats in result: %v", missingBeats))
	}

	if len(unknownBeats) > 0 {
		errs = append(errs, fmt.Errorf("unknown beats in result: %v", unknownBeats))
	}

	if len(misplacedBeats) > 0 {
		var printed []string

		for key, values := range misplacedBeats {
			printed = append(
				printed,
				fmt.Sprintf("beat '%s' expected at index %d, got at index %d", key, values.expected, values.actual),
			)
		}

		errs = append(errs, fmt.Errorf("misplaced beats:\n\t- %v", strings.Join(printed, "\n\t- ")))
	}

	if len(errs) > 0 {
		return errors.Join(append(errs, ErrInvalidStoryPlan)...)
	}

	return nil
}
