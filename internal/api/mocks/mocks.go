// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package apimocks

import (
	"context"

	"github.com/a-novel/service-story-schematics/internal/services"
	"github.com/a-novel/service-story-schematics/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCreateBeatsSheetService creates a new instance of MockCreateBeatsSheetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateBeatsSheetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateBeatsSheetService {
	mock := &MockCreateBeatsSheetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCreateBeatsSheetService is an autogenerated mock type for the CreateBeatsSheetService type
type MockCreateBeatsSheetService struct {
	mock.Mock
}

type MockCreateBeatsSheetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateBeatsSheetService) EXPECT() *MockCreateBeatsSheetService_Expecter {
	return &MockCreateBeatsSheetService_Expecter{mock: &_m.Mock}
}

// CreateBeatsSheet provides a mock function for the type MockCreateBeatsSheetService
func (_mock *MockCreateBeatsSheetService) CreateBeatsSheet(ctx context.Context, request services.CreateBeatsSheetRequest) (*models.BeatsSheet, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateBeatsSheet")
	}

	var r0 *models.BeatsSheet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateBeatsSheetRequest) (*models.BeatsSheet, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateBeatsSheetRequest) *models.BeatsSheet); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BeatsSheet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.CreateBeatsSheetRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreateBeatsSheetService_CreateBeatsSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBeatsSheet'
type MockCreateBeatsSheetService_CreateBeatsSheet_Call struct {
	*mock.Call
}

// CreateBeatsSheet is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.CreateBeatsSheetRequest
func (_e *MockCreateBeatsSheetService_Expecter) CreateBeatsSheet(ctx interface{}, request interface{}) *MockCreateBeatsSheetService_CreateBeatsSheet_Call {
	return &MockCreateBeatsSheetService_CreateBeatsSheet_Call{Call: _e.mock.On("CreateBeatsSheet", ctx, request)}
}

func (_c *MockCreateBeatsSheetService_CreateBeatsSheet_Call) Run(run func(ctx context.Context, request services.CreateBeatsSheetRequest)) *MockCreateBeatsSheetService_CreateBeatsSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.CreateBeatsSheetRequest
		if args[1] != nil {
			arg1 = args[1].(services.CreateBeatsSheetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCreateBeatsSheetService_CreateBeatsSheet_Call) Return(beatsSheet *models.BeatsSheet, err error) *MockCreateBeatsSheetService_CreateBeatsSheet_Call {
	_c.Call.Return(beatsSheet, err)
	return _c
}

func (_c *MockCreateBeatsSheetService_CreateBeatsSheet_Call) RunAndReturn(run func(ctx context.Context, request services.CreateBeatsSheetRequest) (*models.BeatsSheet, error)) *MockCreateBeatsSheetService_CreateBeatsSheet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateLoglineService creates a new instance of MockCreateLoglineService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateLoglineService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateLoglineService {
	mock := &MockCreateLoglineService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCreateLoglineService is an autogenerated mock type for the CreateLoglineService type
type MockCreateLoglineService struct {
	mock.Mock
}

type MockCreateLoglineService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateLoglineService) EXPECT() *MockCreateLoglineService_Expecter {
	return &MockCreateLoglineService_Expecter{mock: &_m.Mock}
}

// CreateLogline provides a mock function for the type MockCreateLoglineService
func (_mock *MockCreateLoglineService) CreateLogline(ctx context.Context, request services.CreateLoglineRequest) (*models.Logline, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogline")
	}

	var r0 *models.Logline
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateLoglineRequest) (*models.Logline, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.CreateLoglineRequest) *models.Logline); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Logline)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.CreateLoglineRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreateLoglineService_CreateLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogline'
type MockCreateLoglineService_CreateLogline_Call struct {
	*mock.Call
}

// CreateLogline is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.CreateLoglineRequest
func (_e *MockCreateLoglineService_Expecter) CreateLogline(ctx interface{}, request interface{}) *MockCreateLoglineService_CreateLogline_Call {
	return &MockCreateLoglineService_CreateLogline_Call{Call: _e.mock.On("CreateLogline", ctx, request)}
}

func (_c *MockCreateLoglineService_CreateLogline_Call) Run(run func(ctx context.Context, request services.CreateLoglineRequest)) *MockCreateLoglineService_CreateLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.CreateLoglineRequest
		if args[1] != nil {
			arg1 = args[1].(services.CreateLoglineRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCreateLoglineService_CreateLogline_Call) Return(logline *models.Logline, err error) *MockCreateLoglineService_CreateLogline_Call {
	_c.Call.Return(logline, err)
	return _c
}

func (_c *MockCreateLoglineService_CreateLogline_Call) RunAndReturn(run func(ctx context.Context, request services.CreateLoglineRequest) (*models.Logline, error)) *MockCreateLoglineService_CreateLogline_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpandBeatService creates a new instance of MockExpandBeatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpandBeatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpandBeatService {
	mock := &MockExpandBeatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExpandBeatService is an autogenerated mock type for the ExpandBeatService type
type MockExpandBeatService struct {
	mock.Mock
}

type MockExpandBeatService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpandBeatService) EXPECT() *MockExpandBeatService_Expecter {
	return &MockExpandBeatService_Expecter{mock: &_m.Mock}
}

// ExpandBeat provides a mock function for the type MockExpandBeatService
func (_mock *MockExpandBeatService) ExpandBeat(ctx context.Context, request services.ExpandBeatRequest) (*models.Beat, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExpandBeat")
	}

	var r0 *models.Beat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ExpandBeatRequest) (*models.Beat, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ExpandBeatRequest) *models.Beat); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Beat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.ExpandBeatRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExpandBeatService_ExpandBeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpandBeat'
type MockExpandBeatService_ExpandBeat_Call struct {
	*mock.Call
}

// ExpandBeat is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.ExpandBeatRequest
func (_e *MockExpandBeatService_Expecter) ExpandBeat(ctx interface{}, request interface{}) *MockExpandBeatService_ExpandBeat_Call {
	return &MockExpandBeatService_ExpandBeat_Call{Call: _e.mock.On("ExpandBeat", ctx, request)}
}

func (_c *MockExpandBeatService_ExpandBeat_Call) Run(run func(ctx context.Context, request services.ExpandBeatRequest)) *MockExpandBeatService_ExpandBeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.ExpandBeatRequest
		if args[1] != nil {
			arg1 = args[1].(services.ExpandBeatRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExpandBeatService_ExpandBeat_Call) Return(beat *models.Beat, err error) *MockExpandBeatService_ExpandBeat_Call {
	_c.Call.Return(beat, err)
	return _c
}

func (_c *MockExpandBeatService_ExpandBeat_Call) RunAndReturn(run func(ctx context.Context, request services.ExpandBeatRequest) (*models.Beat, error)) *MockExpandBeatService_ExpandBeat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpandLoglineService creates a new instance of MockExpandLoglineService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpandLoglineService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpandLoglineService {
	mock := &MockExpandLoglineService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExpandLoglineService is an autogenerated mock type for the ExpandLoglineService type
type MockExpandLoglineService struct {
	mock.Mock
}

type MockExpandLoglineService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpandLoglineService) EXPECT() *MockExpandLoglineService_Expecter {
	return &MockExpandLoglineService_Expecter{mock: &_m.Mock}
}

// ExpandLogline provides a mock function for the type MockExpandLoglineService
func (_mock *MockExpandLoglineService) ExpandLogline(ctx context.Context, request services.ExpandLoglineRequest) (*models.LoglineIdea, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExpandLogline")
	}

	var r0 *models.LoglineIdea
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ExpandLoglineRequest) (*models.LoglineIdea, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ExpandLoglineRequest) *models.LoglineIdea); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoglineIdea)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.ExpandLoglineRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExpandLoglineService_ExpandLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpandLogline'
type MockExpandLoglineService_ExpandLogline_Call struct {
	*mock.Call
}

// ExpandLogline is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.ExpandLoglineRequest
func (_e *MockExpandLoglineService_Expecter) ExpandLogline(ctx interface{}, request interface{}) *MockExpandLoglineService_ExpandLogline_Call {
	return &MockExpandLoglineService_ExpandLogline_Call{Call: _e.mock.On("ExpandLogline", ctx, request)}
}

func (_c *MockExpandLoglineService_ExpandLogline_Call) Run(run func(ctx context.Context, request services.ExpandLoglineRequest)) *MockExpandLoglineService_ExpandLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.ExpandLoglineRequest
		if args[1] != nil {
			arg1 = args[1].(services.ExpandLoglineRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExpandLoglineService_ExpandLogline_Call) Return(loglineIdea *models.LoglineIdea, err error) *MockExpandLoglineService_ExpandLogline_Call {
	_c.Call.Return(loglineIdea, err)
	return _c
}

func (_c *MockExpandLoglineService_ExpandLogline_Call) RunAndReturn(run func(ctx context.Context, request services.ExpandLoglineRequest) (*models.LoglineIdea, error)) *MockExpandLoglineService_ExpandLogline_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerateBeatsSheetService creates a new instance of MockGenerateBeatsSheetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerateBeatsSheetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerateBeatsSheetService {
	mock := &MockGenerateBeatsSheetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenerateBeatsSheetService is an autogenerated mock type for the GenerateBeatsSheetService type
type MockGenerateBeatsSheetService struct {
	mock.Mock
}

type MockGenerateBeatsSheetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerateBeatsSheetService) EXPECT() *MockGenerateBeatsSheetService_Expecter {
	return &MockGenerateBeatsSheetService_Expecter{mock: &_m.Mock}
}

// GenerateBeatsSheet provides a mock function for the type MockGenerateBeatsSheetService
func (_mock *MockGenerateBeatsSheetService) GenerateBeatsSheet(ctx context.Context, request services.GenerateBeatsSheetRequest) ([]models.Beat, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GenerateBeatsSheet")
	}

	var r0 []models.Beat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.GenerateBeatsSheetRequest) ([]models.Beat, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.GenerateBeatsSheetRequest) []models.Beat); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Beat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.GenerateBeatsSheetRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenerateBeatsSheetService_GenerateBeatsSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateBeatsSheet'
type MockGenerateBeatsSheetService_GenerateBeatsSheet_Call struct {
	*mock.Call
}

// GenerateBeatsSheet is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.GenerateBeatsSheetRequest
func (_e *MockGenerateBeatsSheetService_Expecter) GenerateBeatsSheet(ctx interface{}, request interface{}) *MockGenerateBeatsSheetService_GenerateBeatsSheet_Call {
	return &MockGenerateBeatsSheetService_GenerateBeatsSheet_Call{Call: _e.mock.On("GenerateBeatsSheet", ctx, request)}
}

func (_c *MockGenerateBeatsSheetService_GenerateBeatsSheet_Call) Run(run func(ctx context.Context, request services.GenerateBeatsSheetRequest)) *MockGenerateBeatsSheetService_GenerateBeatsSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.GenerateBeatsSheetRequest
		if args[1] != nil {
			arg1 = args[1].(services.GenerateBeatsSheetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGenerateBeatsSheetService_GenerateBeatsSheet_Call) Return(beats []models.Beat, err error) *MockGenerateBeatsSheetService_GenerateBeatsSheet_Call {
	_c.Call.Return(beats, err)
	return _c
}

func (_c *MockGenerateBeatsSheetService_GenerateBeatsSheet_Call) RunAndReturn(run func(ctx context.Context, request services.GenerateBeatsSheetRequest) ([]models.Beat, error)) *MockGenerateBeatsSheetService_GenerateBeatsSheet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerateLoglinesService creates a new instance of MockGenerateLoglinesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerateLoglinesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerateLoglinesService {
	mock := &MockGenerateLoglinesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenerateLoglinesService is an autogenerated mock type for the GenerateLoglinesService type
type MockGenerateLoglinesService struct {
	mock.Mock
}

type MockGenerateLoglinesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerateLoglinesService) EXPECT() *MockGenerateLoglinesService_Expecter {
	return &MockGenerateLoglinesService_Expecter{mock: &_m.Mock}
}

// GenerateLoglines provides a mock function for the type MockGenerateLoglinesService
func (_mock *MockGenerateLoglinesService) GenerateLoglines(ctx context.Context, request services.GenerateLoglinesRequest) ([]models.LoglineIdea, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GenerateLoglines")
	}

	var r0 []models.LoglineIdea
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.GenerateLoglinesRequest) ([]models.LoglineIdea, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.GenerateLoglinesRequest) []models.LoglineIdea); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LoglineIdea)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.GenerateLoglinesRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenerateLoglinesService_GenerateLoglines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateLoglines'
type MockGenerateLoglinesService_GenerateLoglines_Call struct {
	*mock.Call
}

// GenerateLoglines is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.GenerateLoglinesRequest
func (_e *MockGenerateLoglinesService_Expecter) GenerateLoglines(ctx interface{}, request interface{}) *MockGenerateLoglinesService_GenerateLoglines_Call {
	return &MockGenerateLoglinesService_GenerateLoglines_Call{Call: _e.mock.On("GenerateLoglines", ctx, request)}
}

func (_c *MockGenerateLoglinesService_GenerateLoglines_Call) Run(run func(ctx context.Context, request services.GenerateLoglinesRequest)) *MockGenerateLoglinesService_GenerateLoglines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.GenerateLoglinesRequest
		if args[1] != nil {
			arg1 = args[1].(services.GenerateLoglinesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGenerateLoglinesService_GenerateLoglines_Call) Return(loglineIdeas []models.LoglineIdea, err error) *MockGenerateLoglinesService_GenerateLoglines_Call {
	_c.Call.Return(loglineIdeas, err)
	return _c
}

func (_c *MockGenerateLoglinesService_GenerateLoglines_Call) RunAndReturn(run func(ctx context.Context, request services.GenerateLoglinesRequest) ([]models.LoglineIdea, error)) *MockGenerateLoglinesService_GenerateLoglines_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListBeatsSheetsService creates a new instance of MockListBeatsSheetsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListBeatsSheetsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListBeatsSheetsService {
	mock := &MockListBeatsSheetsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockListBeatsSheetsService is an autogenerated mock type for the ListBeatsSheetsService type
type MockListBeatsSheetsService struct {
	mock.Mock
}

type MockListBeatsSheetsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListBeatsSheetsService) EXPECT() *MockListBeatsSheetsService_Expecter {
	return &MockListBeatsSheetsService_Expecter{mock: &_m.Mock}
}

// ListBeatsSheets provides a mock function for the type MockListBeatsSheetsService
func (_mock *MockListBeatsSheetsService) ListBeatsSheets(ctx context.Context, request services.ListBeatsSheetsRequest) ([]*models.BeatsSheetPreview, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListBeatsSheets")
	}

	var r0 []*models.BeatsSheetPreview
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ListBeatsSheetsRequest) ([]*models.BeatsSheetPreview, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ListBeatsSheetsRequest) []*models.BeatsSheetPreview); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.BeatsSheetPreview)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.ListBeatsSheetsRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockListBeatsSheetsService_ListBeatsSheets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBeatsSheets'
type MockListBeatsSheetsService_ListBeatsSheets_Call struct {
	*mock.Call
}

// ListBeatsSheets is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.ListBeatsSheetsRequest
func (_e *MockListBeatsSheetsService_Expecter) ListBeatsSheets(ctx interface{}, request interface{}) *MockListBeatsSheetsService_ListBeatsSheets_Call {
	return &MockListBeatsSheetsService_ListBeatsSheets_Call{Call: _e.mock.On("ListBeatsSheets", ctx, request)}
}

func (_c *MockListBeatsSheetsService_ListBeatsSheets_Call) Run(run func(ctx context.Context, request services.ListBeatsSheetsRequest)) *MockListBeatsSheetsService_ListBeatsSheets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.ListBeatsSheetsRequest
		if args[1] != nil {
			arg1 = args[1].(services.ListBeatsSheetsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockListBeatsSheetsService_ListBeatsSheets_Call) Return(beatsSheetPreviews []*models.BeatsSheetPreview, err error) *MockListBeatsSheetsService_ListBeatsSheets_Call {
	_c.Call.Return(beatsSheetPreviews, err)
	return _c
}

func (_c *MockListBeatsSheetsService_ListBeatsSheets_Call) RunAndReturn(run func(ctx context.Context, request services.ListBeatsSheetsRequest) ([]*models.BeatsSheetPreview, error)) *MockListBeatsSheetsService_ListBeatsSheets_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListLoglinesService creates a new instance of MockListLoglinesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListLoglinesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListLoglinesService {
	mock := &MockListLoglinesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockListLoglinesService is an autogenerated mock type for the ListLoglinesService type
type MockListLoglinesService struct {
	mock.Mock
}

type MockListLoglinesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListLoglinesService) EXPECT() *MockListLoglinesService_Expecter {
	return &MockListLoglinesService_Expecter{mock: &_m.Mock}
}

// ListLoglines provides a mock function for the type MockListLoglinesService
func (_mock *MockListLoglinesService) ListLoglines(ctx context.Context, request services.ListLoglinesRequest) ([]*models.LoglinePreview, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListLoglines")
	}

	var r0 []*models.LoglinePreview
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ListLoglinesRequest) ([]*models.LoglinePreview, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.ListLoglinesRequest) []*models.LoglinePreview); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.LoglinePreview)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.ListLoglinesRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockListLoglinesService_ListLoglines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLoglines'
type MockListLoglinesService_ListLoglines_Call struct {
	*mock.Call
}

// ListLoglines is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.ListLoglinesRequest
func (_e *MockListLoglinesService_Expecter) ListLoglines(ctx interface{}, request interface{}) *MockListLoglinesService_ListLoglines_Call {
	return &MockListLoglinesService_ListLoglines_Call{Call: _e.mock.On("ListLoglines", ctx, request)}
}

func (_c *MockListLoglinesService_ListLoglines_Call) Run(run func(ctx context.Context, request services.ListLoglinesRequest)) *MockListLoglinesService_ListLoglines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.ListLoglinesRequest
		if args[1] != nil {
			arg1 = args[1].(services.ListLoglinesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockListLoglinesService_ListLoglines_Call) Return(loglinePreviews []*models.LoglinePreview, err error) *MockListLoglinesService_ListLoglines_Call {
	_c.Call.Return(loglinePreviews, err)
	return _c
}

func (_c *MockListLoglinesService_ListLoglines_Call) RunAndReturn(run func(ctx context.Context, request services.ListLoglinesRequest) ([]*models.LoglinePreview, error)) *MockListLoglinesService_ListLoglines_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegenerateBeatsService creates a new instance of MockRegenerateBeatsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegenerateBeatsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegenerateBeatsService {
	mock := &MockRegenerateBeatsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegenerateBeatsService is an autogenerated mock type for the RegenerateBeatsService type
type MockRegenerateBeatsService struct {
	mock.Mock
}

type MockRegenerateBeatsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegenerateBeatsService) EXPECT() *MockRegenerateBeatsService_Expecter {
	return &MockRegenerateBeatsService_Expecter{mock: &_m.Mock}
}

// RegenerateBeats provides a mock function for the type MockRegenerateBeatsService
func (_mock *MockRegenerateBeatsService) RegenerateBeats(ctx context.Context, request services.RegenerateBeatsRequest) ([]models.Beat, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateBeats")
	}

	var r0 []models.Beat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RegenerateBeatsRequest) ([]models.Beat, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.RegenerateBeatsRequest) []models.Beat); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Beat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.RegenerateBeatsRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegenerateBeatsService_RegenerateBeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateBeats'
type MockRegenerateBeatsService_RegenerateBeats_Call struct {
	*mock.Call
}

// RegenerateBeats is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.RegenerateBeatsRequest
func (_e *MockRegenerateBeatsService_Expecter) RegenerateBeats(ctx interface{}, request interface{}) *MockRegenerateBeatsService_RegenerateBeats_Call {
	return &MockRegenerateBeatsService_RegenerateBeats_Call{Call: _e.mock.On("RegenerateBeats", ctx, request)}
}

func (_c *MockRegenerateBeatsService_RegenerateBeats_Call) Run(run func(ctx context.Context, request services.RegenerateBeatsRequest)) *MockRegenerateBeatsService_RegenerateBeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.RegenerateBeatsRequest
		if args[1] != nil {
			arg1 = args[1].(services.RegenerateBeatsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegenerateBeatsService_RegenerateBeats_Call) Return(beats []models.Beat, err error) *MockRegenerateBeatsService_RegenerateBeats_Call {
	_c.Call.Return(beats, err)
	return _c
}

func (_c *MockRegenerateBeatsService_RegenerateBeats_Call) RunAndReturn(run func(ctx context.Context, request services.RegenerateBeatsRequest) ([]models.Beat, error)) *MockRegenerateBeatsService_RegenerateBeats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelectBeatsSheetService creates a new instance of MockSelectBeatsSheetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectBeatsSheetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectBeatsSheetService {
	mock := &MockSelectBeatsSheetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSelectBeatsSheetService is an autogenerated mock type for the SelectBeatsSheetService type
type MockSelectBeatsSheetService struct {
	mock.Mock
}

type MockSelectBeatsSheetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectBeatsSheetService) EXPECT() *MockSelectBeatsSheetService_Expecter {
	return &MockSelectBeatsSheetService_Expecter{mock: &_m.Mock}
}

// SelectBeatsSheet provides a mock function for the type MockSelectBeatsSheetService
func (_mock *MockSelectBeatsSheetService) SelectBeatsSheet(ctx context.Context, request services.SelectBeatsSheetRequest) (*models.BeatsSheet, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectBeatsSheet")
	}

	var r0 *models.BeatsSheet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SelectBeatsSheetRequest) (*models.BeatsSheet, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SelectBeatsSheetRequest) *models.BeatsSheet); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BeatsSheet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.SelectBeatsSheetRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectBeatsSheetService_SelectBeatsSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectBeatsSheet'
type MockSelectBeatsSheetService_SelectBeatsSheet_Call struct {
	*mock.Call
}

// SelectBeatsSheet is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.SelectBeatsSheetRequest
func (_e *MockSelectBeatsSheetService_Expecter) SelectBeatsSheet(ctx interface{}, request interface{}) *MockSelectBeatsSheetService_SelectBeatsSheet_Call {
	return &MockSelectBeatsSheetService_SelectBeatsSheet_Call{Call: _e.mock.On("SelectBeatsSheet", ctx, request)}
}

func (_c *MockSelectBeatsSheetService_SelectBeatsSheet_Call) Run(run func(ctx context.Context, request services.SelectBeatsSheetRequest)) *MockSelectBeatsSheetService_SelectBeatsSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.SelectBeatsSheetRequest
		if args[1] != nil {
			arg1 = args[1].(services.SelectBeatsSheetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSelectBeatsSheetService_SelectBeatsSheet_Call) Return(beatsSheet *models.BeatsSheet, err error) *MockSelectBeatsSheetService_SelectBeatsSheet_Call {
	_c.Call.Return(beatsSheet, err)
	return _c
}

func (_c *MockSelectBeatsSheetService_SelectBeatsSheet_Call) RunAndReturn(run func(ctx context.Context, request services.SelectBeatsSheetRequest) (*models.BeatsSheet, error)) *MockSelectBeatsSheetService_SelectBeatsSheet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelectLoglineService creates a new instance of MockSelectLoglineService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectLoglineService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectLoglineService {
	mock := &MockSelectLoglineService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSelectLoglineService is an autogenerated mock type for the SelectLoglineService type
type MockSelectLoglineService struct {
	mock.Mock
}

type MockSelectLoglineService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectLoglineService) EXPECT() *MockSelectLoglineService_Expecter {
	return &MockSelectLoglineService_Expecter{mock: &_m.Mock}
}

// SelectLogline provides a mock function for the type MockSelectLoglineService
func (_mock *MockSelectLoglineService) SelectLogline(ctx context.Context, request services.SelectLoglineRequest) (*models.Logline, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectLogline")
	}

	var r0 *models.Logline
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SelectLoglineRequest) (*models.Logline, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SelectLoglineRequest) *models.Logline); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Logline)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.SelectLoglineRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectLoglineService_SelectLogline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLogline'
type MockSelectLoglineService_SelectLogline_Call struct {
	*mock.Call
}

// SelectLogline is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.SelectLoglineRequest
func (_e *MockSelectLoglineService_Expecter) SelectLogline(ctx interface{}, request interface{}) *MockSelectLoglineService_SelectLogline_Call {
	return &MockSelectLoglineService_SelectLogline_Call{Call: _e.mock.On("SelectLogline", ctx, request)}
}

func (_c *MockSelectLoglineService_SelectLogline_Call) Run(run func(ctx context.Context, request services.SelectLoglineRequest)) *MockSelectLoglineService_SelectLogline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.SelectLoglineRequest
		if args[1] != nil {
			arg1 = args[1].(services.SelectLoglineRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSelectLoglineService_SelectLogline_Call) Return(logline *models.Logline, err error) *MockSelectLoglineService_SelectLogline_Call {
	_c.Call.Return(logline, err)
	return _c
}

func (_c *MockSelectLoglineService_SelectLogline_Call) RunAndReturn(run func(ctx context.Context, request services.SelectLoglineRequest) (*models.Logline, error)) *MockSelectLoglineService_SelectLogline_Call {
	_c.Call.Return(run)
	return _c
}
